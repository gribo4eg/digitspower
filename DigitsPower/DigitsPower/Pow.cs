using System;
using System.Collections.Generic;
using System.Numerics;
using System.Security.Cryptography;
using System.Diagnostics;
using System.Windows.Forms;
using static DigitsPower.HelpMethods;
using static System.Math;
using static DigitsPower.MontgomeryMethods;

namespace DigitsPower
{
    public delegate BigInteger Inverse(BigInteger mod, BigInteger found);
    public delegate BigInteger Multiply(BigInteger a, BigInteger b, BigInteger m, BigInteger inv);
    public delegate BigInteger OutRes(BigInteger res, BigInteger mod, BigInteger inv);
    public delegate BigInteger InRes(ref BigInteger a, ref BigInteger b, BigInteger m);

    public class MyList<T> : List<T>
    {
        public T this[BigInteger index]    // Indexer declaration
        {
            get { return base[(int)index]; }
            set { base[(int)index] = value; }
        }
    }
    static class PowFunctions
    {
        #region prime
        private static int[] list_prime = {
            2,3,5,7,11,13,17,19,23,29,
            31,37,41,43,47,53,59,61,67,71,
            73,79,83,89,97,101,103,107,109,113,
            127,131,137,139,149,151,157,163,167,173,
            179,181,191,193,197,199,211,223,227,229,
            233,239,241,251,257,263,269,271,277,281,
            283,293,307,311,313,317,331,337,347,349,
            353,359,367,373,379,383,389,397,401,409,
            419,421,431,433,439,443,449,457,461,463,
            467,479,487,491,499,503,509,521,523,541,
            547,557,563,569,571,577,587,593,599,601,
            607,613,617,619,631,641,643,647,653,659,
            661,673,677,683,691,701,709,719,727,733,
            739,743,751,757,761,769,773,787,797,809,
            811,821,823,827,829,839,853,857,859,863,
            877,881,883,887,907,911,919,929,937,941,
            947,953,967,971,977,983,991,997,1009,1013,
            1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,
            1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,
            1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,
            1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,
            1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,
            1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,
            1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,
            1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,
            1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,
            1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,
            1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,
            1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,
            1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,
            1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,
            2063,2069,2081,2083,2087,2089,2099,2111,2113,2129,
            2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,
            2221,2237,2239,2243,2251,2267,2269,2273,2281,2287,
            2293,2297,2309,2311,2333,2339,2341,2347,2351,2357,
            2371,2377,2381,2383,2389,2393,2399,2411,2417,2423,
            2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,
            2539,2543,2549,2551,2557,2579,2591,2593,2609,2617,
            2621,2633,2647,2657,2659,2663,2671,2677,2683,2687,
            2689,2693,2699,2707,2711,2713,2719,2729,2731,2741,
            2749,2753,2767,2777,2789,2791,2797,2801,2803,2819,
            2833,2837,2843,2851,2857,2861,2879,2887,2897,2903,
            2909,2917,2927,2939,2953,2957,2963,2969,2971,2999,
            3001,3011,3019,3023,3037,3041,3049,3061,3067,3079,
            3083,3089,3109,3119,3121,3137,3163,3167,3169,3181,
            3187,3191,3203,3209,3217,3221,3229,3251,3253,3257,
            3259,3271,3299,3301,3307,3313,3319,3323,3329,3331,
            3343,3347,3359,3361,3371,3373,3389,3391,3407,3413,
            3433,3449,3457,3461,3463,3467,3469,3491,3499,3511,
            3517,3527,3529,3533,3539,3541,3547,3557,3559,3571,
            3581,3583,3593,3607,3613,3617,3623,3631,3637,3643,
            3659,3671,3673,3677,3691,3697,3701,3709,3719,3727,
            3733,3739,3761,3767,3769,3779,3793,3797,3803,3821,
            3823,3833,3847,3851,3853,3863,3877,3881,3889,3907,
            3911,3917,3919,3923,3929,3931,3943,3947,3967,3989,
            4001,4003,4007,4013,4019,4021,4027,4049,4051,4057,
            4073,4079,4091,4093,4099,4111,4127,4129,4133,4139,
            4153,4157,4159,4177,4201,4211,4217,4219,4229,4231,
            4241,4243,4253,4259,4261,4271,4273,4283,4289,4297,
            4327,4337,4339,4349,4357,4363,4373,4391,4397,4409,
            4421,4423,4441,4447,4451,4457,4463,4481,4483,4493,
            4507,4513,4517,4519,4523,4547,4549,4561,4567,4583,
            4591,4597,4603,4621,4637,4639,4643,4649,4651,4657,
            4663,4673,4679,4691,4703,4721,4723,4729,4733,4751,
            4759,4783,4787,4789,4793,4799,4801,4813,4817,4831,
            4861,4871,4877,4889,4903,4909,4919,4931,4933,4937,
            4943,4951,4957,4967,4969,4973,4987,4993,4999,5003,
            5009,5011,5021,5023,5039,5051,5059,5077,5081,5087,
            5099,5101,5107,5113,5119,5147,5153,5167,5171,5179,
            5189,5197,5209,5227,5231,5233,5237,5261,5273,5279,
            5281,5297,5303,5309,5323,5333,5347,5351,5381,5387,
            5393,5399,5407,5413,5417,5419,5431,5437,5441,5443,
            5449,5471,5477,5479,5483,5501,5503,5507,5519,5521,
            5527,5531,5557,5563,5569,5573,5581,5591,5623,5639,
            5641,5647,5651,5653,5657,5659,5669,5683,5689,5693,
            5701,5711,5717,5737,5741,5743,5749,5779,5783,5791,
            5801,5807,5813,5821,5827,5839,5843,5849,5851,5857,
            5861,5867,5869,5879,5881,5897,5903,5923,5927,5939,
            5953,5981,5987,6007,6011,6029,6037,6043,6047,6053,
            6067,6073,6079,6089,6091,6101,6113,6121,6131,6133,
            6143,6151,6163,6173,6197,6199,6203,6211,6217,6221,
            6229,6247,6257,6263,6269,6271,6277,6287,6299,6301,
            6311,6317,6323,6329,6337,6343,6353,6359,6361,6367,
            6373,6379,6389,6397,6421,6427,6449,6451,6469,6473,
            6481,6491,6521,6529,6547,6551,6553,6563,6569,6571,
            6577,6581,6599,6607,6619,6637,6653,6659,6661,6673,
            6679,6689,6691,6701,6703,6709,6719,6733,6737,6761,
            6763,6779,6781,6791,6793,6803,6823,6827,6829,6833,
            6841,6857,6863,6869,6871,6883,6899,6907,6911,6917,
            6947,6949,6959,6961,6967,6971,6977,6983,6991,6997,
            7001,7013,7019,7027,7039,7043,7057,7069,7079,7103,
            7109,7121,7127,7129,7151,7159,7177,7187,7193,7207,
            7211,7213,7219,7229,7237,7243,7247,7253,7283,7297,
            7307,7309,7321,7331,7333,7349,7351,7369,7393,7411,
            7417,7433,7451,7457,7459,7477,7481,7487,7489,7499,
            7507,7517,7523,7529,7537,7541,7547,7549,7559,7561,
            7573,7577,7583,7589,7591,7603,7607,7621,7639,7643,
            7649,7669,7673,7681,7687,7691,7699,7703,7717,7723,
            7727,7741,7753,7757,7759,7789,7793,7817,7823,7829,
            7841,7853,7867,7873,7877,7879,7883,7901,7907,7919,
            7927,7933,7937,7949,7951,7963,7993,8009,8011,8017,
            8039,8053,8059,8069,8081,8087,8089,8093,8101,8111,
            8117,8123,8147,8161,8167,8171,8179,8191,8209,8219,
            8221,8231,8233,8237,8243,8263,8269,8273,8287,8291,
            8293,8297,8311,8317,8329,8353,8363,8369,8377,8387,
            8389,8419,8423,8429,8431,8443,8447,8461,8467,8501,
            8513,8521,8527,8537,8539,8543,8563,8573,8581,8597,
            8599,8609,8623,8627,8629,8641,8647,8663,8669,8677,
            8681,8689,8693,8699,8707,8713,8719,8731,8737,8741,
            8747,8753,8761,8779,8783,8803,8807,8819,8821,8831,
            8837,8839,8849,8861,8863,8867,8887,8893,8923,8929,
            8933,8941,8951,8963,8969,8971,8999,9001,9007,9011,
            9013,9029,9041,9043,9049,9059,9067,9091,9103,9109,
            9127,9133,9137,9151,9157,9161,9173,9181,9187,9199,
            9203,9209,9221,9227,9239,9241,9257,9277,9281,9283,
            9293,9311,9319,9323,9337,9341,9343,9349,9371,9377,
            9391,9397,9403,9413,9419,9421,9431,9433,9437,9439,
            9461,9463,9467,9473,9479,9491,9497,9511,9521,9533,
            9539,9547,9551,9587,9601,9613,9619,9623,9629,9631,
            9643,9649,9661,9677,9679,9689,9697,9719,9721,9733,
            9739,9743,9749,9767,9769,9781,9787,9791,9803,9811,
            9817,9829,9833,9839,9851,9857,9859,9871,9883,9887,
            9901,9907,9923,9929,9931,9941,9949,9967,9973,10007,
            10009,10037,10039,10061,10067,10069,10079,10091,10093,10099,
            10103,10111,10133,10139,10141,10151,10159,10163,10169,10177,
            10181,10193,10211,10223,10243,10247,10253,10259,10267,10271,
            10273,10289,10301,10303,10313,10321,10331,10333,10337,10343,
            10357,10369,10391,10399,10427,10429,10433,10453,10457,10459,
            10463,10477,10487,10499,10501,10513,10529,10531,10559,10567,
            10589,10597,10601,10607,10613,10627,10631,10639,10651,10657,
            10663,10667,10687,10691,10709,10711,10723,10729,10733,10739,
            10753,10771,10781,10789,10799,10831,10837,10847,10853,10859,
            10861,10867,10883,10889,10891,10903,10909,10937,10939,10949,
            10957,10973,10979,10987,10993,11003,11027,11047,11057,11059,
            11069,11071,11083,11087,11093,11113,11117,11119,11131,11149,
            11159,11161,11171,11173,11177,11197,11213,11239,11243,11251,
            11257,11261,11273,11279,11287,11299,11311,11317,11321,11329,
            11351,11353,11369,11383,11393,11399,11411,11423,11437,11443,
            11447,11467,11471,11483,11489,11491,11497,11503,11519,11527,
            11549,11551,11579,11587,11593,11597,11617,11621,11633,11657,
            11677,11681,11689,11699,11701,11717,11719,11731,11743,11777,
            11779,11783,11789,11801,11807,11813,11821,11827,11831,11833,
            11839,11863,11867,11887,11897,11903,11909,11923,11927,11933,
            11939,11941,11953,11959,11969,11971,11981,11987,12007,12011,
            12037,12041,12043,12049,12071,12073,12097,12101,12107,12109,
            12113,12119,12143,12149,12157,12161,12163,12197,12203,12211,
            12227,12239,12241,12251,12253,12263,12269,12277,12281,12289,
            12301,12323,12329,12343,12347,12373,12377,12379,12391,12401,
            12409,12413,12421,12433,12437,12451,12457,12473,12479,12487,
            12491,12497,12503,12511,12517,12527,12539,12541,12547,12553,
            12569,12577,12583,12589,12601,12611,12613,12619,12637,12641,
            12647,12653,12659,12671,12689,12697,12703,12713,12721,12739,
            12743,12757,12763,12781,12791,12799,12809,12821,12823,12829,
            12841,12853,12889,12893,12899,12907,12911,12917,12919,12923,
            12941,12953,12959,12967,12973,12979,12983,13001,13003,13007,
            13009,13033,13037,13043,13049,13063,13093,13099,13103,13109,
            13121,13127,13147,13151,13159,13163,13171,13177,13183,13187,
            13217,13219,13229,13241,13249,13259,13267,13291,13297,13309,
            13313,13327,13331,13337,13339,13367,13381,13397,13399,13411,
            13417,13421,13441,13451,13457,13463,13469,13477,13487,13499,
            13513,13523,13537,13553,13567,13577,13591,13597,13613,13619,
            13627,13633,13649,13669,13679,13681,13687,13691,13693,13697,
            13709,13711,13721,13723,13729,13751,13757,13759,13763,13781,
            13789,13799,13807,13829,13831,13841,13859,13873,13877,13879,
            13883,13901,13903,13907,13913,13921,13931,13933,13963,13967,
            13997,13999,14009,14011,14029,14033,14051,14057,14071,14081,
            14083,14087,14107,14143,14149,14153,14159,14173,14177,14197,
            14207,14221,14243,14249,14251,14281,14293,14303,14321,14323,
            14327,14341,14347,14369,14387,14389,14401,14407,14411,14419,
            14423,14431,14437,14447,14449,14461,14479,14489,14503,14519,
            14533,14537,14543,14549,14551,14557,14561,14563,14591,14593,
            14621,14627,14629,14633,14639,14653,14657,14669,14683,14699,
            14713,14717,14723,14731,14737,14741,14747,14753,14759,14767,
            14771,14779,14783,14797,14813,14821,14827,14831,14843,14851,
            14867,14869,14879,14887,14891,14897,14923,14929,14939,14947,
            14951,14957,14969,14983,15013,15017,15031,15053,15061,15073,
            15077,15083,15091,15101,15107,15121,15131,15137,15139,15149,
            15161,15173,15187,15193,15199,15217,15227,15233,15241,15259,
            15263,15269,15271,15277,15287,15289,15299,15307,15313,15319,
            15329,15331,15349,15359,15361,15373,15377,15383,15391,15401,
            15413,15427,15439,15443,15451,15461,15467,15473,15493,15497,
            15511,15527,15541,15551,15559,15569,15581,15583,15601,15607,
            15619,15629,15641,15643,15647,15649,15661,15667,15671,15679,
            15683,15727,15731,15733,15737,15739,15749,15761,15767,15773,
            15787,15791,15797,15803,15809,15817,15823,15859,15877,15881,
            15887,15889,15901,15907,15913,15919,15923,15937,15959,15971,
            15973,15991,16001,16007,16033,16057,16061,16063,16067,16069,
            16073,16087,16091,16097,16103,16111,16127,16139,16141,16183,
            16187,16189,16193,16217,16223,16229,16231,16249,16253,16267,
            16273,16301,16319,16333,16339,16349,16361,16363,16369,16381,
            16411,16417,16421,16427,16433,16447,16451,16453,16477,16481,
            16487,16493,16519,16529,16547,16553,16561,16567,16573,16603,
            16607,16619,16631,16633,16649,16651,16657,16661,16673,16691,
            16693,16699,16703,16729,16741,16747,16759,16763,16787,16811,
            16823,16829,16831,16843,16871,16879,16883,16889,16901,16903,
            16921,16927,16931,16937,16943,16963,16979,16981,16987,16993,
            17011,17021,17027,17029,17033,17041,17047,17053,17077,17093,
            17099,17107,17117,17123,17137,17159,17167,17183,17189,17191,
            17203,17207,17209,17231,17239,17257,17291,17293,17299,17317,
            17321,17327,17333,17341,17351,17359,17377,17383,17387,17389,
            17393,17401,17417,17419,17431,17443,17449,17467,17471,17477,
            17483,17489,17491,17497,17509,17519,17539,17551,17569,17573,
            17579,17581,17597,17599,17609,17623,17627,17657,17659,17669,
            17681,17683,17707,17713,17729,17737,17747,17749,17761,17783,
            17789,17791,17807,17827,17837,17839,17851,17863,17881,17891,
            17903,17909,17911,17921,17923,17929,17939,17957,17959,17971,
            17977,17981,17987,17989,18013,18041,18043,18047,18049,18059,
            18061,18077,18089,18097,18119,18121,18127,18131,18133,18143,
            18149,18169,18181,18191,18199,18211,18217,18223,18229,18233,
            18251,18253,18257,18269,18287,18289,18301,18307,18311,18313,
            18329,18341,18353,18367,18371,18379,18397,18401,18413,18427,
            18433,18439,18443,18451,18457,18461,18481,18493,18503,18517,
            18521,18523,18539,18541,18553,18583,18587,18593,18617,18637,
            18661,18671,18679,18691,18701,18713,18719,18731,18743,18749,
            18757,18773,18787,18793,18797,18803,18839,18859,18869,18899,
            18911,18913,18917,18919,18947,18959,18973,18979,19001,19009,
            19013,19031,19037,19051,19069,19073,19079,19081,19087,19121,
            19139,19141,19157,19163,19181,19183,19207,19211,19213,19219,
            19231,19237,19249,19259,19267,19273,19289,19301,19309,19319,
            19333,19373,19379,19381,19387,19391,19403,19417,19421,19423,
            19427,19429,19433,19441,19447,19457,19463,19469,19471,19477,
            19483,19489,19501,19507,19531,19541,19543,19553,19559,19571,
            19577,19583,19597,19603,19609,19661,19681,19687,19697,19699,
            19709,19717,19727,19739,19751,19753,19759,19763,19777,19793,
            19801,19813,19819,19841,19843,19853,19861,19867,19889,19891,
            19913,19919,19927,19937,19949,19961,19963,19973,19979,19991,
            19993,19997,20011,20021,20023,20029,20047,20051,20063,20071,
            20089,20101,20107,20113,20117,20123,20129,20143,20147,20149,
            20161,20173,20177,20183,20201,20219,20231,20233,20249,20261,
            20269,20287,20297,20323,20327,20333,20341,20347,20353,20357,
            20359,20369,20389,20393,20399,20407,20411,20431,20441,20443,
            20477,20479,20483,20507,20509,20521,20533,20543,20549,20551,
            20563,20593,20599,20611,20627,20639,20641,20663,20681,20693,
            20707,20717,20719,20731,20743,20747,20749,20753,20759,20771,
            20773,20789,20807,20809,20849,20857,20873,20879,20887,20897,
            20899,20903,20921,20929,20939,20947,20959,20963,20981,20983,
            21001,21011,21013,21017,21019,21023,21031,21059,21061,21067,
            21089,21101,21107,21121,21139,21143,21149,21157,21163,21169,
            21179,21187,21191,21193,21211,21221,21227,21247,21269,21277,
            21283,21313,21317,21319,21323,21341,21347,21377,21379,21383,
            21391,21397,21401,21407,21419,21433,21467,21481,21487,21491,
            21493,21499,21503,21517,21521,21523,21529,21557,21559,21563,
            21569,21577,21587,21589,21599,21601,21611,21613,21617,21647,
            21649,21661,21673,21683,21701,21713,21727,21737,21739,21751,
            21757,21767,21773,21787,21799,21803,21817,21821,21839,21841,
            21851,21859,21863,21871,21881,21893,21911,21929,21937,21943,
            21961,21977,21991,21997,22003,22013,22027,22031,22037,22039,
            22051,22063,22067,22073,22079,22091,22093,22109,22111,22123,
            22129,22133,22147,22153,22157,22159,22171,22189,22193,22229,
            22247,22259,22271,22273,22277,22279,22283,22291,22303,22307,
            22343,22349,22367,22369,22381,22391,22397,22409,22433,22441,
            22447,22453,22469,22481,22483,22501,22511,22531,22541,22543,
            22549,22567,22571,22573,22613,22619,22621,22637,22639,22643,
            22651,22669,22679,22691,22697,22699,22709,22717,22721,22727,
            22739,22741,22751,22769,22777,22783,22787,22807,22811,22817,
            22853,22859,22861,22871,22877,22901,22907,22921,22937,22943,
            22961,22963,22973,22993,23003,23011,23017,23021,23027,23029,
            23039,23041,23053,23057,23059,23063,23071,23081,23087,23099,
            23117,23131,23143,23159,23167,23173,23189,23197,23201,23203,
            23209,23227,23251,23269,23279,23291,23293,23297,23311,23321,
            23327,23333,23339,23357,23369,23371,23399,23417,23431,23447,
            23459,23473,23497,23509,23531,23537,23539,23549,23557,23561,
            23563,23567,23581,23593,23599,23603,23609,23623,23627,23629,
            23633,23663,23669,23671,23677,23687,23689,23719,23741,23743,
            23747,23753,23761,23767,23773,23789,23801,23813,23819,23827,
            23831,23833,23857,23869,23873,23879,23887,23893,23899,23909,
            23911,23917,23929,23957,23971,23977,23981,23993,24001,24007,
            24019,24023,24029,24043,24049,24061,24071,24077,24083,24091,
            24097,24103,24107,24109,24113,24121,24133,24137,24151,24169,
            24179,24181,24197,24203,24223,24229,24239,24247,24251,24281,
            24317,24329,24337,24359,24371,24373,24379,24391,24407,24413,
            24419,24421,24439,24443,24469,24473,24481,24499,24509,24517,
            24527,24533,24547,24551,24571,24593,24611,24623,24631,24659,
            24671,24677,24683,24691,24697,24709,24733,24749,24763,24767,
            24781,24793,24799,24809,24821,24841,24847,24851,24859,24877,
            24889,24907,24917,24919,24923,24943,24953,24967,24971,24977,
            24979,24989,25013,25031,25033,25037,25057,25073,25087,25097,
            25111,25117,25121,25127,25147,25153,25163,25169,25171,25183,
            25189,25219,25229,25237,25243,25247,25253,25261,25301,25303,
            25307,25309,25321,25339,25343,25349,25357,25367,25373,25391,
            25409,25411,25423,25439,25447,25453,25457,25463,25469,25471,
            25523,25537,25541,25561,25577,25579,25583,25589,25601,25603,
            25609,25621,25633,25639,25643,25657,25667,25673,25679,25693,
            25703,25717,25733,25741,25747,25759,25763,25771,25793,25799,
            25801,25819,25841,25847,25849,25867,25873,25889,25903,25913,
            25919,25931,25933,25939,25943,25951,25969,25981,25997,25999,
            26003,26017,26021,26029,26041,26053,26083,26099,26107,26111,
            26113,26119,26141,26153,26161,26171,26177,26183,26189,26203,
            26209,26227,26237,26249,26251,26261,26263,26267,26293,26297,
            26309,26317,26321,26339,26347,26357,26371,26387,26393,26399,
            26407,26417,26423,26431,26437,26449,26459,26479,26489,26497,
            26501,26513,26539,26557,26561,26573,26591,26597,26627,26633,
            26641,26647,26669,26681,26683,26687,26693,26699,26701,26711,
            26713,26717,26723,26729,26731,26737,26759,26777,26783,26801,
            26813,26821,26833,26839,26849,26861,26863,26879,26881,26891,
            26893,26903,26921,26927,26947,26951,26953,26959,26981,26987,
            26993,27011,27017,27031,27043,27059,27061,27067,27073,27077,
            27091,27103,27107,27109,27127,27143,27179,27191,27197,27211,
            27239,27241,27253,27259,27271,27277,27281,27283,27299,27329,
            27337,27361,27367,27397,27407,27409,27427,27431,27437,27449,
            27457,27479,27481,27487,27509,27527,27529,27539,27541,27551,
            27581,27583,27611,27617,27631,27647,27653,27673,27689,27691,
            27697,27701,27733,27737,27739,27743,27749,27751,27763,27767,
            27773,27779,27791,27793,27799,27803,27809,27817,27823,27827,
            27847,27851,27883,27893,27901,27917,27919,27941,27943,27947,
            27953,27961,27967,27983,27997,28001,28019,28027,28031,28051,
            28057,28069,28081,28087,28097,28099,28109,28111,28123,28151,
            28163,28181,28183,28201,28211,28219,28229,28277,28279,28283,
            28289,28297,28307,28309,28319,28349,28351,28387,28393,28403,
            28409,28411,28429,28433,28439,28447,28463,28477,28493,28499,
            28513,28517,28537,28541,28547,28549,28559,28571,28573,28579,
            28591,28597,28603,28607,28619,28621,28627,28631,28643,28649,
            28657,28661,28663,28669,28687,28697,28703,28711,28723,28729,
            28751,28753,28759,28771,28789,28793,28807,28813,28817,28837,
            28843,28859,28867,28871,28879,28901,28909,28921,28927,28933,
            28949,28961,28979,29009,29017,29021,29023,29027,29033,29059,
            29063,29077,29101,29123,29129,29131,29137,29147,29153,29167,
            29173,29179,29191,29201,29207,29209,29221,29231,29243,29251,
            29269,29287,29297,29303,29311,29327,29333,29339,29347,29363,
            29383,29387,29389,29399,29401,29411,29423,29429,29437,29443,
            29453,29473,29483,29501,29527,29531,29537,29567,29569,29573,
            29581,29587,29599,29611,29629,29633,29641,29663,29669,29671,
            29683,29717,29723,29741,29753,29759,29761,29789,29803,29819,
            29833,29837,29851,29863,29867,29873,29879,29881,29917,29921,
            29927,29947,29959,29983,29989,30011,30013,30029,30047,30059,
            30071,30089,30091,30097,30103,30109,30113,30119,30133,30137,
            30139,30161,30169,30181,30187,30197,30203,30211,30223,30241,
            30253,30259,30269,30271,30293,30307,30313,30319,30323,30341,
            30347,30367,30389,30391,30403,30427,30431,30449,30467,30469,
            30491,30493,30497,30509,30517,30529,30539,30553,30557,30559,
            30577,30593,30631,30637,30643,30649,30661,30671,30677,30689,
            30697,30703,30707,30713,30727,30757,30763,30773,30781,30803,
            30809,30817,30829,30839,30841,30851,30853,30859,30869,30871,
            30881,30893,30911,30931,30937,30941,30949,30971,30977,30983,
            31013,31019,31033,31039,31051,31063,31069,31079,31081,31091,
            31121,31123,31139,31147,31151,31153,31159,31177,31181,31183,
            31189,31193,31219,31223,31231,31237,31247,31249,31253,31259,
            31267,31271,31277,31307,31319,31321,31327,31333,31337,31357,
            31379,31387,31391,31393,31397,31469,31477,31481,31489,31511,
            31513,31517,31531,31541,31543,31547,31567,31573,31583,31601,
            31607,31627,31643,31649,31657,31663,31667,31687,31699,31721,
            31723,31727,31729,31741,31751,31769,31771,31793,31799,31817,
            31847,31849,31859,31873,31883,31891,31907,31957,31963,31973,
            31981,31991,32003,32009,32027,32029,32051,32057,32059,32063,
            32069,32077,32083,32089,32099,32117,32119,32141,32143,32159,
            32173,32183,32189,32191,32203,32213,32233,32237,32251,32257,
            32261,32297,32299,32303,32309,32321,32323,32327,32341,32353,
            32359,32363,32369,32371,32377,32381,32401,32411,32413,32423,
            32429,32441,32443,32467,32479,32491,32497,32503,32507,32531,
            32533,32537,32561,32563,32569,32573,32579,32587,32603,32609,
            32611,32621,32633,32647,32653,32687,32693,32707,32713,32717,
            32719,32749,32771,32779,32783,32789,32797,32801,32803,32831,
            32833,32839,32843,32869,32887,32909,32911,32917,32933,32939,
            32941,32957,32969,32971,32983,32987,32993,32999,33013,33023,
            33029,33037,33049,33053,33071,33073,33083,33091,33107,33113,
            33119,33149,33151,33161,33179,33181,33191,33199,33203,33211,
            33223,33247,33287,33289,33301,33311,33317,33329,33331,33343,
            33347,33349,33353,33359,33377,33391,33403,33409,33413,33427,
            33457,33461,33469,33479,33487,33493,33503,33521,33529,33533,
            33547,33563,33569,33577,33581,33587,33589,33599,33601,33613,
            33617,33619,33623,33629,33637,33641,33647,33679,33703,33713,
            33721,33739,33749,33751,33757,33767,33769,33773,33791,33797,
            33809,33811,33827,33829,33851,33857,33863,33871,33889,33893,
            33911,33923,33931,33937,33941,33961,33967,33997,34019,34031,
            34033,34039,34057,34061,34123,34127,34129,34141,34147,34157,
            34159,34171,34183,34211,34213,34217,34231,34253,34259,34261,
            34267,34273,34283,34297,34301,34303,34313,34319,34327,34337,
            34351,34361,34367,34369,34381,34403,34421,34429,34439,34457,
            34469,34471,34483,34487,34499,34501,34511,34513,34519,34537,
            34543,34549,34583,34589,34591,34603,34607,34613,34631,34649,
            34651,34667,34673,34679,34687,34693,34703,34721,34729,34739,
            34747,34757,34759,34763,34781,34807,34819,34841,34843,34847,
            34849,34871,34877,34883,34897,34913,34919,34939,34949,34961,
            34963,34981,35023,35027,35051,35053,35059,35069,35081,35083,
            35089,35099,35107,35111,35117,35129,35141,35149,35153,35159,
            35171,35201,35221,35227,35251,35257,35267,35279,35281,35291,
            35311,35317,35323,35327,35339,35353,35363,35381,35393,35401,
            35407,35419,35423,35437,35447,35449,35461,35491,35507,35509,
            35521,35527,35531,35533,35537,35543,35569,35573,35591,35593,
            35597,35603,35617,35671,35677,35729,35731,35747,35753,35759,
            35771,35797,35801,35803,35809,35831,35837,35839,35851,35863
        };
        #endregion

        #region Addition_chain
        private static Dictionary<int, int[]> Add_Chain = new Dictionary<int, int[]>
        {
            { 3, new int[] { 2, 3, 7 } },
            { 5, new int[] { 2, 3, 5 } },
            { 7, new int[] { 2, 3, 5, 7 } },
            { 11, new int[] { 2, 3, 4, 5, 7, 9, 11, 15 } },
            { 13, new int[] { 2, 3, 4, 5, 7, 9, 11, 13, 15 } },
            { 17, new int[] { 2, 3, 4, 5, 7, 11, 13, 14, 15, 17, 31 } },
            { 19, new int[] { 2, 3, 4, 5, 7, 11, 12, 13, 15, 17, 19, 31 } },
            { 23, new int[] { 2, 3, 4, 5, 7, 8, 11, 13, 15, 17, 19, 23, 31 } },
            { 29, new int[] { 2, 3, 4, 5, 6, 7, 11, 13, 15, 17, 19, 23, 29, 31 } },
            { 31, new int[] { 2, 3, 4, 5, 6, 7, 11, 13, 15, 17, 19, 23, 29, 31 } },
            { 37, new int[] { 2, 3, 4, 5, 6, 7, 11, 13, 15, 17, 19, 23, 26, 29, 31, 37, 63 } },
            { 41, new int[] { 2, 3, 4, 5, 6, 7, 11, 13, 15, 17, 19, 22, 23, 29, 31, 37, 41, 63 } },
            { 43, new int[] { 2, 3, 4, 5, 6, 7, 11, 13, 15, 17, 19, 20, 23, 29, 31, 37, 41, 43, 63 } },
            { 47, new int[] { 2, 3, 4, 5, 6, 7, 11, 13, 15, 16, 17, 19, 23, 29, 31, 37, 41, 43, 47, 63 } },
            { 53, new int[] { 2, 3, 4, 5, 6, 7, 10, 11, 13, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 63 } },
            { 59, new int[] { 2, 3, 4, 5, 6, 7, 11, 13, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 63 } },
            { 61, new int[] { 2, 3, 4, 5, 6, 7, 11, 13, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63 } },
            { 67, new int[] { 2, 3, 4, 5, 6, 7, 11, 13, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 60, 61, 63, 67, 127 } },
            { 71, new int[] { 2, 3, 4, 5, 6, 7, 11, 13, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 56, 59, 61, 63, 67, 71, 127 } },
            { 73, new int[] { 2, 3, 4, 5, 6, 7, 11, 13, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 54, 59, 61, 63, 67, 71, 73, 127 } },
            { 79, new int[] { 2, 3, 4, 5, 6, 7, 11, 13, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 48, 53, 59, 61, 63, 67, 71, 73, 79, 127 } },
            { 83, new int[] { 2, 3, 4, 5, 6, 7, 11, 13, 15, 17, 19, 23, 29, 31, 37, 41, 43, 44, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 127 } },
            { 89, new int[] { 2, 3, 4, 5, 6, 7, 11, 13, 15, 17, 19, 23, 29, 31, 37, 38, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 127 } },
            { 97, new int[] { 2, 3, 4, 5, 6, 7, 8, 11, 13, 15, 17, 19, 23, 29, 30, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 127 } },
            { 101, new int[] { 2, 3, 4, 5, 6, 7, 8, 11, 13, 15, 17, 19, 23, 26, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 127 } },
            { 103, new int[] { 2, 3, 4, 5, 6, 7, 8, 11, 13, 15, 17, 19, 23, 24, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 127 } },
            { 107, new int[] { 2, 3, 4, 5, 6, 7, 8, 11, 13, 15, 17, 19, 20, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 127 } },
            { 109, new int[] { 2, 3, 4, 5, 6, 7, 8, 11, 13, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 127 } },
            { 113, new int[] { 2, 3, 4, 5, 6, 7, 8, 11, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127 } },
            { 127, new int[] { 2, 3, 4, 5, 6, 7, 8, 11, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127 } },
            { 131, new int[] { 2, 3, 4, 5, 6, 7, 8, 11, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 124, 127, 131, 255 } },
            { 137, new int[] { 2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 118, 127, 131, 137, 255 } },
            { 139, new int[] { 2, 3, 4, 5, 6, 7, 8, 11, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 116, 127, 131, 137, 139, 255 } },
            { 149, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 106, 107, 109, 113, 127, 131, 137, 139, 149, 255 } },
            { 151, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 104, 107, 109, 113, 127, 131, 137, 139, 149, 151, 255 } },
            { 157, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 98, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 255 } },
            { 163, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 92, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 255 } },
            { 167, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 88, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 255 } },
            { 173, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 82, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 255 } },
            { 179, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 76, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 255 } },
            { 181, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 74, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 255 } },
            { 191, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 64, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 255 } },
            { 193, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 62, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 255 } },
            { 197, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 58, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 255 } },
            { 199, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 56, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 255 } },
            { 211, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 44, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 255 } },
            { 223, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 32, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 255 } },
            { 227, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 28, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 255 } },
            { 229, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 26, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 255 } },
            { 233, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 22, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 255 } },
            { 239, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 255 } },
            { 241, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 255 } },
            { 251, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255 } },
            { 257, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 254, 255, 257, 511 } },
            { 263, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 248, 251, 255, 257, 263, 511 } },
            { 269, new int[] { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 242, 251, 255, 257, 263, 269, 511 } },
            { 271, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 240, 241, 251, 255, 257, 263, 269, 271, 511 } },
            { 277, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 234, 239, 241, 251, 255, 257, 263, 269, 271, 277, 511 } },
            { 281, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 230, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 511 } },
            { 283, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 228, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 511 } },
            { 293, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 218, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 511 } },
            { 307, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 204, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 511 } },
            { 311, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 200, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 511 } },
            { 313, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 198, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 511 } },
            { 317, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 194, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 511 } },
            { 331, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 180, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 511 } },
            { 337, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 174, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 511 } },
            { 347, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 164, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 511 } },
            { 349, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 162, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 511 } },
            { 353, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 158, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 511 } },
            { 359, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 152, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 511 } },
            { 367, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 144, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 511 } },
            { 373, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 138, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 511 } },
            { 379, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 132, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 511 } },
            { 383, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 128, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 511 } },
            { 389, new int[] { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 122, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 511 } },
            { 397, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 114, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 511 } },
            { 401, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 110, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 511 } },
            { 409, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 102, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 511 } },
            { 419, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 92, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 511 } },
            { 421, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 90, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 511 } },
            { 431, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 80, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 511 } },
            { 433, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 78, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 511 } },
            { 439, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 72, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 511 } },
            { 443, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 68, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 511 } },
            { 449, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 62, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 511 } },
            { 457, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 54, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 511 } },
            { 461, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 50, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 511 } },
            { 463, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 48, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 511 } },
            { 467, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 44, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 511 } },
            { 479, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 32, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 511 } },
            { 487, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 24, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 511 } },
            { 491, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 20, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 511 } },
            { 499, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 511 } },
            { 503, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 511 } },
            { 509, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511 } },
            { 521, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 502, 503, 509, 511, 521, 1023 } },
            { 523, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 500, 503, 509, 511, 521, 523, 1023 } },
            { 541, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 482, 487, 491, 499, 503, 509, 511, 521, 523, 541, 1023 } },
            { 547, new int[] { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 476, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 1023 } },
            { 557, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 466, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 1023 } },
            { 563, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 460, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 563, 1023 } },
            { 569, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 454, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 563, 569, 1023 } },
            { 571, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 452, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 563, 569, 571, 1023 } },
            { 577, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 446, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 1023 } },
            { 587, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 436, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 1023 } },
            { 593, new int[] { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 430, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 1023 } },
            { 599, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 424, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 1023 } },
            { 601, new int[] { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 422, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 1023 } },
            { 607, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 416, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 1023 } },
            { 613, new int[] { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 410, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 1023 } },
            { 617, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 406, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 1023 } },
            { 619, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 404, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 1023 } },
            { 631, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 392, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 1023 } },
            { 641, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 382, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 1023 } },
            { 643, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 380, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 1023 } },
            { 647, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 376, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 1023 } },
            { 653, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 370, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 1023 } },
            { 659, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 364, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 1023 } },
            { 661, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 362, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 1023 } },
            { 673, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 350, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 1023 } },
            { 677, new int[] { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 346, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 1023 } },
            { 683, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 340, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 1023 } },
            { 691, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 332, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 1023 } },
            { 701, new int[] { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 322, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 1023 } },
            { 709, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 314, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 1023 } },
            { 719, new int[] { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 304, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 1023 } },
            { 727, new int[] { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 293, 296, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 1023 } },
            { 733, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 290, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 1023 } },
            { 739, new int[] { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 281, 283, 284, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 1023 } },
            { 743, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 277, 280, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 1023 } },
            { 751, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 63, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 255, 257, 263, 269, 271, 272, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 1023 } },
            // 132 числа
        };
        #endregion

        #region Addition_chain_only_prime
        private static Dictionary<int, int[]> Add_Chain_only_prime = new Dictionary<int, int[]>
        {
            { 3, new int[] { 2, 3 } },
            { 5, new int[] { 2, 3, 5 } },
            { 7, new int[] { 2, 3, 5, 7 } },
            { 11, new int[] { 2, 3, 5, 7, 9, 11 } },
            { 13, new int[] { 2, 3, 5, 7, 9, 11, 13 } },
            { 17, new int[] { 2, 3, 4, 5, 7, 11, 13, 17 } },
            { 19, new int[] { 2, 3, 4, 5, 7, 11, 13, 17, 19 } },
            { 23, new int[] { 2, 3, 4, 5, 7, 11, 13, 17, 19, 23 } },
            { 29, new int[] { 2, 3, 4, 5, 6, 7, 11, 13, 17, 19, 23, 29 } },
            { 31, new int[] { 2, 3, 4, 5, 6, 7, 11, 13, 17, 19, 23, 29, 31 } },
            { 37, new int[] { 2, 3, 4, 5, 6, 7, 11, 13, 17, 19, 23, 29, 31, 37 } },
            { 41, new int[] { 2, 3, 4, 5, 6, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41 } },
            { 43, new int[] { 2, 3, 4, 5, 6, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43 } },
            { 47, new int[] { 2, 3, 4, 5, 6, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47 } },
            { 53, new int[] { 2, 3, 4, 5, 6, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53 } },
            { 59, new int[] { 2, 3, 4, 5, 6, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59 } },
            { 61, new int[] { 2, 3, 4, 5, 6, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61 } },
            { 67, new int[] { 2, 3, 4, 5, 6, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67 } },
            { 71, new int[] { 2, 3, 4, 5, 6, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71 } },
            { 73, new int[] { 2, 3, 4, 5, 6, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73 } },
            { 79, new int[] { 2, 3, 4, 5, 6, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79 } },
            { 83, new int[] { 2, 3, 4, 5, 6, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83 } },
            { 89, new int[] { 2, 3, 4, 5, 6, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89 } },
            { 97, new int[] { 2, 3, 4, 5, 6, 7, 8, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 } },
            { 101, new int[] { 2, 3, 4, 5, 6, 7, 8, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101 } },
            { 103, new int[] { 2, 3, 4, 5, 6, 7, 8, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103 } },
            { 107, new int[] { 2, 3, 4, 5, 6, 7, 8, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107 } },
            { 109, new int[] { 2, 3, 4, 5, 6, 7, 8, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109 } },
            { 113, new int[] { 2, 3, 4, 5, 6, 7, 8, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113 } },
            { 127, new int[] { 2, 3, 4, 5, 6, 7, 8, 11, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127 } },
            { 131, new int[] { 2, 3, 4, 5, 6, 7, 8, 11, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131 } },
            { 137, new int[] { 2, 3, 4, 5, 6, 7, 8, 11, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137 } },
            { 139, new int[] { 2, 3, 4, 5, 6, 7, 8, 11, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139 } },
            { 149, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149 } },
            { 151, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151 } },
            { 157, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157 } },
            { 163, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163 } },
            { 167, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167 } },
            { 173, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173 } },
            { 179, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179 } },
            { 181, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181 } },
            { 191, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191 } },
            { 193, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193 } },
            { 197, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197 } },
            { 199, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199 } },
            { 211, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211 } },
            { 223, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223 } },
            { 227, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227 } },
            { 229, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229 } },
            { 233, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233 } },
            { 239, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239 } },
            { 241, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241 } },
            { 251, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251 } },
            { 257, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257 } },
            { 263, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263 } },
            { 269, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269 } },
            { 271, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271 } },
            { 277, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277 } },
            { 281, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281 } },
            { 283, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283 } },
            { 293, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293 } },
            { 307, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307 } },
            { 311, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311 } },
            { 313, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313 } },
            { 317, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317 } },
            { 331, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331 } },
            { 337, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337 } },
            { 347, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347 } },
            { 349, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349 } },
            { 353, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353 } },
            { 359, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359 } },
            { 367, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367 } },
            { 373, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373 } },
            { 379, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379 } },
            { 383, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383 } },
            { 389, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389 } },
            { 397, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397 } },
            { 401, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401 } },
            { 409, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409 } },
            { 419, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419 } },
            { 421, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421 } },
            { 431, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431 } },
            { 433, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433 } },
            { 439, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439 } },
            { 443, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443 } },
            { 449, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449 } },
            { 457, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457 } },
            { 461, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461 } },
            { 463, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463 } },
            { 467, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467 } },
            { 479, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479 } },
            { 487, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487 } },
            { 491, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491 } },
            { 499, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499 } },
            { 503, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503 } },
            { 509, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509 } },
            { 521, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521 } },
            { 523, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523 } },
            { 541, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541 } },
            { 547, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547 } },
            { 557, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557 } },
            { 563, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563 } },
            { 569, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569 } },
            { 571, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571 } },
            { 577, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577 } },
            { 587, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587 } },
            { 593, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593 } },
            { 599, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599 } },
            { 601, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601 } },
            { 607, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607 } },
            { 613, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613 } },
            { 617, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617 } },
            { 619, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619 } },
            { 631, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631 } },
            { 641, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641 } },
            { 643, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643 } },
            { 647, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647 } },
            { 653, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653 } },
            { 659, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659 } },
            { 661, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661 } },
            { 673, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673 } },
            { 677, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677 } },
            { 683, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683 } },
            { 691, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691 } },
            { 701, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701 } },
            { 709, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709 } },
            { 719, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719 } },
            { 727, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727 } },
            { 733, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733 } },
            { 739, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739 } },
            { 743, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743 } },
            { 751, new int[] { 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751 } },
        };
        #endregion

        #region static_conv_to_binary
        private static string[] conv_numbers = {
            "0", "1", "10", "11", "100", "101", "110", "111", "1000", "1001", "1010", "1011", "1100", "1101", "1110", "1111", "10000", "10001", "10010", "10011", "10100", "10101", "10110", "10111", "11000", "11001", "11010", "11011", "11100", "11101", "11110", "11111",
            "100000", "100001", "100010", "100011", "100100", "100101", "100110", "100111", "101000", "101001", "101010", "101011", "101100", "101101", "101110", "101111", "110000", "110001", "110010", "110011", "110100", "110101", "110110", "110111", "111000", "111001", "111010", "111011", "111100", "111101", "111110", "111111",
            "1000000", "1000001", "1000010", "1000011", "1000100", "1000101", "1000110", "1000111", "1001000", "1001001", "1001010", "1001011", "1001100", "1001101", "1001110", "1001111", "1010000", "1010001", "1010010", "1010011", "1010100", "1010101", "1010110", "1010111", "1011000", "1011001", "1011010", "1011011", "1011100", "1011101", "1011110", "1011111",
            "1100000", "1100001", "1100010", "1100011", "1100100", "1100101", "1100110", "1100111", "1101000", "1101001", "1101010", "1101011", "1101100", "1101101", "1101110", "1101111", "1110000", "1110001", "1110010", "1110011", "1110100", "1110101", "1110110", "1110111", "1111000", "1111001", "1111010", "1111011", "1111100", "1111101", "1111110", "1111111",

            "10000000", "10000001", "10000010", "10000011", "10000100", "10000101", "10000110", "10000111", "10001000", "10001001", "10001010", "10001011", "10001100", "10001101", "10001110", "10001111", "10010000", "10010001", "10010010", "10010011", "10010100", "10010101", "10010110", "10010111", "10011000", "10011001", "10011010", "10011011", "10011100", "10011101", "10011110", "10011111", "10100000", "10100001", "10100010", "10100011", "10100100", "10100101", "10100110", "10100111", "10101000", "10101001", "10101010", "10101011", "10101100", "10101101", "10101110", "10101111", "10110000", "10110001", "10110010", "10110011", "10110100", "10110101", "10110110", "10110111", "10111000", "10111001", "10111010", "10111011", "10111100", "10111101", "10111110", "10111111", "11000000", "11000001", "11000010", "11000011", "11000100", "11000101", "11000110", "11000111", "11001000", "11001001", "11001010", "11001011", "11001100", "11001101", "11001110", "11001111", "11010000", "11010001", "11010010", "11010011", "11010100", "11010101", "11010110", "11010111", "11011000", "11011001", "11011010", "11011011", "11011100", "11011101", "11011110", "11011111", "11100000", "11100001", "11100010", "11100011", "11100100", "11100101", "11100110", "11100111", "11101000", "11101001", "11101010", "11101011", "11101100", "11101101", "11101110", "11101111", "11110000", "11110001", "11110010", "11110011", "11110100", "11110101", "11110110", "11110111", "11111000", "11111001", "11111010", "11111011", "11111100", "11111101", "11111110", "11111111", "100000000", "100000001", "100000010", "100000011", "100000100", "100000101", "100000110", "100000111", "100001000", "100001001", "100001010", "100001011", "100001100", "100001101", "100001110", "100001111", "100010000", "100010001", "100010010", "100010011", "100010100", "100010101", "100010110", "100010111", "100011000", "100011001", "100011010", "100011011", "100011100", "100011101", "100011110", "100011111", "100100000", "100100001", "100100010", "100100011", "100100100", "100100101", "100100110", "100100111", "100101000", "100101001", "100101010", "100101011", "100101100", "100101101", "100101110", "100101111", "100110000", "100110001", "100110010", "100110011", "100110100", "100110101", "100110110", "100110111", "100111000", "100111001", "100111010", "100111011", "100111100", "100111101", "100111110", "100111111", "101000000", "101000001", "101000010", "101000011", "101000100", "101000101", "101000110", "101000111", "101001000", "101001001", "101001010", "101001011", "101001100", "101001101", "101001110", "101001111", "101010000", "101010001", "101010010", "101010011", "101010100", "101010101", "101010110", "101010111", "101011000", "101011001", "101011010", "101011011", "101011100", "101011101", "101011110", "101011111", "101100000", "101100001", "101100010", "101100011", "101100100", "101100101", "101100110", "101100111", "101101000", "101101001", "101101010", "101101011", "101101100", "101101101", "101101110", "101101111", "101110000", "101110001", "101110010", "101110011", "101110100", "101110101", "101110110", "101110111", "101111000", "101111001", "101111010", "101111011", "101111100", "101111101", "101111110", "101111111", "110000000", "110000001", "110000010", "110000011", "110000100", "110000101", "110000110", "110000111", "110001000", "110001001", "110001010", "110001011", "110001100", "110001101", "110001110", "110001111", "110010000", "110010001", "110010010", "110010011", "110010100", "110010101", "110010110", "110010111", "110011000", "110011001", "110011010", "110011011", "110011100", "110011101", "110011110", "110011111", "110100000", "110100001", "110100010", "110100011", "110100100", "110100101", "110100110", "110100111", "110101000", "110101001", "110101010", "110101011", "110101100", "110101101", "110101110", "110101111", "110110000", "110110001", "110110010", "110110011", "110110100", "110110101", "110110110", "110110111", "110111000", "110111001", "110111010", "110111011", "110111100", "110111101", "110111110", "110111111", "111000000", "111000001", "111000010", "111000011", "111000100", "111000101", "111000110", "111000111", "111001000", "111001001", "111001010", "111001011", "111001100", "111001101", "111001110", "111001111", "111010000", "111010001", "111010010", "111010011", "111010100", "111010101", "111010110", "111010111", "111011000", "111011001", "111011010", "111011011", "111011100", "111011101", "111011110", "111011111", "111100000", "111100001", "111100010", "111100011", "111100100", "111100101", "111100110", "111100111", "111101000", "111101001", "111101010", "111101011", "111101100", "111101101", "111101110", "111101111", "111110000", "111110001", "111110010", "111110011", "111110100", "111110101", "111110110", "111110111", "111111000", "111111001", "111111010", "111111011", "111111100", "111111101", "111111110", "111111111", "1000000000", "1000000001", "1000000010", "1000000011", "1000000100", "1000000101", "1000000110", "1000000111", "1000001000", "1000001001", "1000001010", "1000001011", "1000001100", "1000001101", "1000001110", "1000001111", "1000010000", "1000010001", "1000010010", "1000010011", "1000010100", "1000010101", "1000010110", "1000010111", "1000011000", "1000011001", "1000011010", "1000011011", "1000011100", "1000011101", "1000011110", "1000011111", "1000100000", "1000100001", "1000100010", "1000100011", "1000100100", "1000100101", "1000100110", "1000100111", "1000101000", "1000101001", "1000101010", "1000101011", "1000101100", "1000101101", "1000101110", "1000101111", "1000110000", "1000110001", "1000110010", "1000110011", "1000110100", "1000110101", "1000110110", "1000110111", "1000111000", "1000111001", "1000111010", "1000111011", "1000111100", "1000111101", "1000111110", "1000111111", "1001000000", "1001000001", "1001000010", "1001000011", "1001000100", "1001000101", "1001000110", "1001000111", "1001001000", "1001001001", "1001001010", "1001001011", "1001001100", "1001001101", "1001001110", "1001001111", "1001010000", "1001010001", "1001010010", "1001010011", "1001010100", "1001010101", "1001010110", "1001010111", "1001011000", "1001011001", "1001011010", "1001011011", "1001011100", "1001011101", "1001011110", "1001011111", "1001100000", "1001100001", "1001100010", "1001100011", "1001100100", "1001100101", "1001100110", "1001100111", "1001101000", "1001101001", "1001101010", "1001101011", "1001101100", "1001101101", "1001101110", "1001101111", "1001110000", "1001110001", "1001110010", "1001110011", "1001110100", "1001110101", "1001110110", "1001110111", "1001111000", "1001111001", "1001111010", "1001111011", "1001111100", "1001111101", "1001111110", "1001111111", "1010000000", "1010000001", "1010000010", "1010000011", "1010000100", "1010000101", "1010000110", "1010000111", "1010001000", "1010001001", "1010001010", "1010001011", "1010001100", "1010001101", "1010001110", "1010001111", "1010010000", "1010010001", "1010010010", "1010010011", "1010010100", "1010010101", "1010010110", "1010010111", "1010011000", "1010011001", "1010011010", "1010011011", "1010011100", "1010011101", "1010011110", "1010011111", "1010100000", "1010100001", "1010100010", "1010100011", "1010100100", "1010100101", "1010100110", "1010100111", "1010101000", "1010101001", "1010101010", "1010101011", "1010101100", "1010101101", "1010101110", "1010101111", "1010110000", "1010110001", "1010110010", "1010110011", "1010110100", "1010110101", "1010110110", "1010110111", "1010111000", "1010111001", "1010111010", "1010111011", "1010111100", "1010111101", "1010111110", "1010111111", "1011000000", "1011000001", "1011000010", "1011000011", "1011000100", "1011000101", "1011000110", "1011000111", "1011001000", "1011001001", "1011001010", "1011001011", "1011001100", "1011001101", "1011001110", "1011001111", "1011010000", "1011010001", "1011010010", "1011010011", "1011010100", "1011010101", "1011010110", "1011010111", "1011011000", "1011011001", "1011011010", "1011011011", "1011011100", "1011011101", "1011011110", "1011011111", "1011100000", "1011100001", "1011100010", "1011100011", "1011100100", "1011100101", "1011100110", "1011100111", "1011101000", "1011101001", "1011101010", "1011101011", "1011101100", "1011101101", "1011101110", "1011101111", "1011110000", "1011110001", "1011110010", "1011110011", "1011110100", "1011110101", "1011110110", "1011110111", "1011111000", "1011111001", "1011111010", "1011111011", "1011111100", "1011111101", "1011111110", "1011111111", "1100000000", "1100000001", "1100000010", "1100000011", "1100000100", "1100000101", "1100000110", "1100000111", "1100001000", "1100001001", "1100001010", "1100001011", "1100001100", "1100001101", "1100001110", "1100001111", "1100010000", "1100010001", "1100010010", "1100010011", "1100010100", "1100010101", "1100010110", "1100010111", "1100011000", "1100011001", "1100011010", "1100011011", "1100011100", "1100011101", "1100011110", "1100011111", "1100100000", "1100100001", "1100100010", "1100100011", "1100100100", "1100100101", "1100100110", "1100100111", "1100101000", "1100101001", "1100101010", "1100101011", "1100101100", "1100101101", "1100101110", "1100101111", "1100110000", "1100110001", "1100110010", "1100110011", "1100110100", "1100110101", "1100110110", "1100110111", "1100111000", "1100111001", "1100111010", "1100111011", "1100111100", "1100111101", "1100111110", "1100111111", "1101000000", "1101000001", "1101000010", "1101000011", "1101000100", "1101000101", "1101000110", "1101000111", "1101001000", "1101001001", "1101001010", "1101001011", "1101001100", "1101001101", "1101001110", "1101001111", "1101010000", "1101010001", "1101010010", "1101010011", "1101010100", "1101010101", "1101010110", "1101010111", "1101011000", "1101011001", "1101011010", "1101011011", "1101011100", "1101011101", "1101011110", "1101011111", "1101100000", "1101100001", "1101100010", "1101100011", "1101100100", "1101100101", "1101100110", "1101100111", "1101101000", "1101101001", "1101101010", "1101101011", "1101101100", "1101101101", "1101101110", "1101101111", "1101110000", "1101110001", "1101110010", "1101110011", "1101110100", "1101110101", "1101110110", "1101110111", "1101111000", "1101111001", "1101111010", "1101111011", "1101111100", "1101111101", "1101111110", "1101111111", "1110000000", "1110000001", "1110000010", "1110000011", "1110000100", "1110000101", "1110000110", "1110000111", "1110001000", "1110001001", "1110001010", "1110001011", "1110001100", "1110001101", "1110001110", "1110001111", "1110010000", "1110010001", "1110010010", "1110010011", "1110010100", "1110010101", "1110010110", "1110010111", "1110011000", "1110011001", "1110011010", "1110011011", "1110011100", "1110011101", "1110011110", "1110011111", "1110100000", "1110100001", "1110100010", "1110100011", "1110100100", "1110100101", "1110100110", "1110100111", "1110101000", "1110101001", "1110101010", "1110101011", "1110101100", "1110101101", "1110101110", "1110101111", "1110110000", "1110110001", "1110110010", "1110110011", "1110110100", "1110110101", "1110110110", "1110110111", "1110111000", "1110111001", "1110111010", "1110111011", "1110111100", "1110111101", "1110111110", "1110111111", "1111000000", "1111000001", "1111000010", "1111000011", "1111000100", "1111000101", "1111000110", "1111000111", "1111001000", "1111001001", "1111001010", "1111001011", "1111001100", "1111001101", "1111001110", "1111001111", "1111010000", "1111010001", "1111010010", "1111010011", "1111010100", "1111010101", "1111010110", "1111010111", "1111011000", "1111011001", "1111011010", "1111011011", "1111011100", "1111011101", "1111011110", "1111011111", "1111100000", "1111100001", "1111100010", "1111100011", "1111100100", "1111100101", "1111100110", "1111100111", "1111101000", "1111101001", "1111101010", "1111101011", "1111101100", "1111101101", "1111101110", "1111101111", "1111110000", "1111110001", "1111110010", "1111110011", "1111110100", "1111110101", "1111110110", "1111110111", "1111111000", "1111111001", "1111111010", "1111111011", "1111111100", "1111111101", "1111111110", "1111111111", "10000000000", "10000000001", "10000000010", "10000000011", "10000000100", "10000000101", "10000000110", "10000000111", "10000001000", "10000001001", "10000001010", "10000001011", "10000001100", "10000001101", "10000001110", "10000001111", "10000010000", "10000010001", "10000010010", "10000010011", "10000010100", "10000010101", "10000010110", "10000010111", "10000011000", "10000011001", "10000011010", "10000011011", "10000011100", "10000011101", "10000011110", "10000011111", "10000100000", "10000100001", "10000100010", "10000100011", "10000100100", "10000100101", "10000100110", "10000100111", "10000101000", "10000101001", "10000101010", "10000101011", "10000101100", "10000101101", "10000101110", "10000101111", "10000110000", "10000110001", "10000110010", "10000110011", "10000110100", "10000110101", "10000110110", "10000110111", "10000111000", "10000111001", "10000111010", "10000111011", "10000111100", "10000111101", "10000111110", "10000111111", "10001000000", "10001000001", "10001000010", "10001000011", "10001000100", "10001000101", "10001000110", "10001000111", "10001001000", "10001001001", "10001001010", "10001001011", "10001001100"
        };
        // від 0 до 1100
        #endregion

        public static string Reverse(string s)
        {
            char[] charArray = s.ToCharArray();
            Array.Reverse(charArray);
            return new string(charArray);
        }

        #region binary

        public static BigInteger mul(BigInteger a, BigInteger b, BigInteger m)
        {
            return ((a * b) % m);
        }

        public static BigInteger BinaryRL(BigInteger found, BigInteger pow, BigInteger mod)
        {
            bool mont = AdditionalParameters.montFlag;

            found = found % mod;
            BigInteger t = found;
            BigInteger res = 1;

            string binary = ConvToBinary(pow); // старший біт в рядку під номером 0

            if (mont)
            {
                MyList <BigInteger> parameters = MontgomeryMethods.toMontgomeryDomain(ref t, ref res, mod);
                for (int i = binary.Length - 1; i >= 0; i--)
                {
                    if (binary[i] == '1')
                        res = MontgomeryMethods.MontgomeryMultDomain(t, res, mod, parameters);
                    t = MontgomeryMethods.MontgomeryMultDomain(t, t, mod, parameters); ;
                }
                res = MontgomeryMethods.outMontgomeryDomain(res, mod, parameters);
            }
            else
            {
                for (int i = binary.Length - 1; i >= 0; i--)
                {
                    if (binary[i] == '1')
                        res = t * res % mod; //Приведення за модулем після кожного кроку
                    t = t * t % mod;
                }
            }

            return res;

        }

        public static BigInteger BinaryLR(BigInteger found, BigInteger pow, BigInteger mod)
        {
            bool mont = AdditionalParameters.montFlag;
            BigInteger res, t;
            string binary = ConvToBinary(pow); // старший біт в рядку під номером 0

            res = 1;
            t = found % mod;

            if (mont)
            {
                MyList <BigInteger> parameters = MontgomeryMethods.toMontgomeryDomain(ref t, ref res, mod);

                for (int i = 0; i < binary.Length; i++)
                {
                    res = MontgomeryMethods.MontgomeryMultDomain(res, res, mod, parameters);
                    if ('1' == binary[i])
                        res = MontgomeryMethods.MontgomeryMultDomain(t, res, mod, parameters);
                }
                res = MontgomeryMethods.outMontgomeryDomain(res, mod, parameters);
            }
            else
            {
                for (int i = 0; i < binary.Length; i++)
                {
                    res = res * res % mod;
                    if (binary[i] == '1')
                        res = t * res % mod;//Приведення до степеня після кожного кроку
                }
            }

            return res;
        }


        public static BigInteger NAFBinaryRL(BigInteger found, BigInteger pow, BigInteger mod)
        {
            bool mont = AdditionalParameters.montFlag;

            BigInteger res, t;
            MyList<int> x;
            found = found % mod;

            res = 1;
            t = found;
            x = ToNAF(pow);

            if (mont)
            {
                MyList <BigInteger> parameters = MontgomeryMethods.toMontgomeryDomain(ref t, ref res, mod);

                for (int i = 0; i < x.Count; i++)
                {
                    if (x[i] == 1)
                        res = MontgomeryMethods.MontgomeryMultDomain(res, t, mod, parameters);
                    else if (x[i] == -1)
                        res = MontgomeryMethods.MontgomeryMultDomain(res, MontgomeryMethods.MontgomeryInverse(mod, t, parameters), mod, parameters);
                    t = MontgomeryMethods.MontgomeryMultDomain(t, t, mod, parameters);
                }
                res = MontgomeryMethods.outMontgomeryDomain(res, mod, parameters);
            }
            else
            {
                for (int i = 0; i < x.Count; i++)
                {
                    if (x[i] == 1)
                        res = res * t % mod;
                    else if (x[i] == -1)
                        res = res * Euclid_2_1(mod, t) % mod;
                    t = t * t % mod;
                }
            }


            return res;

        }

        public static BigInteger NAFBinaryLR(BigInteger found, BigInteger pow, BigInteger mod)
        {
            bool mont = AdditionalParameters.montFlag;

            BigInteger res;
            MyList<int> x;
            found = found % mod;

            x = ToNAF(pow);
            if (mont)
            {
                BigInteger t;

                res = 1;
                t = found;
                MyList <BigInteger> parameters = MontgomeryMethods.toMontgomeryDomain(ref t, ref res, mod);
                for (int i = x.Count - 1; i >= 0; i--)
                {
                    res = MontgomeryMethods.MontgomeryMultDomain(res, res, mod, parameters);
                    if (x[i] == 1)
                        res = MontgomeryMethods.MontgomeryMultDomain(res, t, mod, parameters);
                    else if (x[i] == -1)
                        res = MontgomeryMethods.MontgomeryMultDomain(res, MontgomeryInverse(mod, t, parameters), mod, parameters);
                }
                res = MontgomeryMethods.outMontgomeryDomain(res, mod, parameters);
            }
            else
            {
                BigInteger inv = Euclid_2_1(mod, found);
                res = found;

                for (int i = x.Count - 2; i > -1; i--)
                {
                    res = res * res % mod;
                    if (x[i] == 1)
                        res = res * found % mod;
                    else if (x[i] == -1)
                        res = res * inv % mod;
                }
            }
            return res;

        }

        public static BigInteger AddSubRL(BigInteger found, BigInteger pow, BigInteger mod)
        {
            bool mont = AdditionalParameters.montFlag;
            found = found % mod;

            BigInteger res, pow3;
            string pow3_bin, pow_bin;

            res = 1;
            pow3 = pow * 3;

            pow_bin = ConvToBinary(pow);
            pow3_bin = ConvToBinary(pow3);
            int pow3_length = pow3_bin.Length - 1;
            while (pow_bin.Length <= pow3_length)
                pow_bin = '0' + pow_bin;

            BigInteger t = found;
            if (mont)
            {
                MyList<BigInteger> parameters = MontgomeryMethods.toMontgomeryDomain(ref t, ref res, mod);

                for(int i = pow3_length - 1; i >= 0; i--)
                {
                    if (pow3_bin[i] == '1' && pow_bin[i] == '0')
                        res = MontgomeryMethods.MontgomeryMultDomain(res, t, mod, parameters);
                    else if (pow3_bin[i] == '0' && pow_bin[i] == '1')
                        res = MontgomeryMethods.MontgomeryMultDomain(res, MontgomeryInverse(mod, t, parameters), mod, parameters);
                    t = MontgomeryMethods.MontgomeryMultDomain(t, t, mod, parameters);
                }
                res = MontgomeryMethods.outMontgomeryDomain(res, mod, parameters);
            }
            else
            {
                for (int i = pow3_length - 1; i > -1; i--)
                {
                    if (pow3_bin[i] == '1' && pow_bin[i] == '0')
                        res = res * t % mod;
                    else if (pow3_bin[i] == '0' && pow_bin[i] == '1')
                        res = res * Euclid_2_1(mod, t) % mod;
                    t = t * t % mod;
                }
            }
            return res;
        }

        public static BigInteger AddSubLR(BigInteger found, BigInteger pow, BigInteger mod)
        {
            bool mont = AdditionalParameters.montFlag;
            found = found % mod;

            BigInteger res, pow3;
            string pow3_bin, pow_bin;

            res = found;
            pow3 = pow * 3;

            pow_bin = ConvToBinary(pow);
            pow3_bin = ConvToBinary(pow3);
            int pow3_length = pow3_bin.Length - 1;
            while (pow_bin.Length <= pow3_length)
                pow_bin = '0' + pow_bin;

            if (mont)
            {
                MyList <BigInteger> parameters = MontgomeryMethods.toMontgomeryDomain(ref found, ref res, mod);

                for (int i = 1; i < pow3_length; i++)
                {
                    res = MontgomeryMultDomain(res, res, mod, parameters);
                    if (pow3_bin[i] == '1' && pow_bin[i] == '0')
                        res = MontgomeryMultDomain(res, found, mod, parameters);
                    else if (pow3_bin[i] == '0' && pow_bin[i] == '1')
                        res = MontgomeryMultDomain(res, MontgomeryInverse(mod, found, parameters), mod, parameters);
                }

                res = outMontgomeryDomain(res, mod, parameters);
            }
            else
            {
                BigInteger inv = Euclid_2_1(mod, found);

                for (int i = 1; i < pow3_length; i++)
                {
                    res = res * res % mod;
                    if (pow3_bin[i] == '1' && pow_bin[i] == '0')
                        res = res * found % mod;
                    else if (pow3_bin[i] == '0' && pow_bin[i] == '1')
                        res = res * inv % mod;
                }
            }

            return res;
        }

        public static BigInteger Joye_double_and_add(BigInteger found, BigInteger pow, BigInteger mod)
        {
            bool mont = AdditionalParameters.montFlag;

            BigInteger res, t;
            int powLen;
            string pow_bin;
            found = found % mod;

            pow_bin = ConvToBinary(pow);
            res = 1;
            t = found;
            powLen = pow_bin.Length;
            if (mont)
            {

                MyList <BigInteger> parameters = MontgomeryMethods.toMontgomeryDomain(ref t, ref res, mod);

                for (int i = powLen - 1; i >= 0; i--)
                {
                    if ('1' == pow_bin[i])
                    {
                        res = MontgomeryMethods.MontgomeryMultDomain(res, res, mod, parameters);
                        res = MontgomeryMethods.MontgomeryMultDomain(res, t, mod, parameters);
                    }
                    else
                    {
                        t = MontgomeryMethods.MontgomeryMultDomain(t, t, mod, parameters);
                        t = MontgomeryMethods.MontgomeryMultDomain(res, t, mod, parameters);
                    }
                }
                res = MontgomeryMethods.outMontgomeryDomain(res, mod, parameters);
            }
            else
            {

                for (int i = powLen - 1; i >= 0; i--)
                {
                    if (pow_bin[i] == '1')
                    {
                        res = res * res % mod;
                        res = res * t % mod;
                    }
                    else
                    {
                        t = t * t % mod;
                        t = res * t % mod;
                    }
                }
            }

            return res;
        }

        public static BigInteger MontgomeryLadder(BigInteger found, BigInteger pow, BigInteger mod)
        {
            bool mont = AdditionalParameters.montFlag;
            BigInteger res, t;
            int powLen;
            string pow_bin;
            found = found % mod;

            pow_bin = ConvToBinary(pow);
            t = found;
            res = 1;
            powLen = pow_bin.Length;
            if(mont)
            {
                MyList <BigInteger> parameters = MontgomeryMethods.toMontgomeryDomain(ref t, ref res, mod);

                for (int i = 0; i < powLen; i++)
                {
                    if (pow_bin[i] == '0')
                    {
                        t = MontgomeryMethods.MontgomeryMultDomain(t, res, mod, parameters);
                        res = MontgomeryMethods.MontgomeryMultDomain(res, res, mod, parameters);
                    }
                    else
                    {
                        res = MontgomeryMethods.MontgomeryMultDomain(res, t, mod, parameters);
                        t = MontgomeryMethods.MontgomeryMultDomain(t, t, mod, parameters);
                    }
                }
                res = MontgomeryMethods.outMontgomeryDomain(res, mod, parameters);
            }
            else
            {

                for (int i = 0; i < powLen; i++)
                {
                    if (pow_bin[i] == '0')
                    {
                        t = t * res % mod;
                        res = res * res % mod;
                    }
                    else
                    {
                        res = res * t % mod;
                        t = t * t % mod;
                    }
                }
            }

            return res;
        }

        public static BigInteger DBNS1RL(BigInteger found, BigInteger pow, BigInteger mod, bool convert_method, long A, long B)
        {
            BigInteger[,] mas_k;
            mas_k = convert_method ? Convert_to_DBNS_1(pow, A, B)
                                   : Convert_to_DBNS_2(pow, A, B);
            found = found % mod;

            long lastindex = mas_k.GetLength(0) - 1;
            BigInteger t = found;
            BigInteger res = 1;

            for (long i = 0; i < mas_k[lastindex, 1]; i++)
                t = mul(t, t, mod);


            for (long i = 0; i < mas_k[lastindex, 2]; i++)
                t = mul(mul(t, t, mod), t, mod);

            if (mas_k[lastindex, 0] == -1)
                res = mul(res, Euclid_2_1(mod, t), mod);
            else if (mas_k[lastindex, 0] == 1)
                res = mul(res, t, mod);

            for (long i = lastindex - 1; i >= 0; i--)
            {
                BigInteger u = mas_k[i, 1] - mas_k[i + 1, 1];
                BigInteger v = mas_k[i, 2] - mas_k[i + 1, 2];
                for (long j = 0; j < u; j++)
                    t = mul(t, t, mod);

                for (long j = 0; j < v; j++)
                    t = mul(mul(t, t, mod), t, mod);

                if (mas_k[i, 0] == -1)
                    res = mul(res, Euclid_2_1(mod, t), mod);
                else if (mas_k[i, 0] == 1)
                    res = mul(res, t, mod);
            }
            return res;
        }

        public static BigInteger DBNS1LR(BigInteger found, BigInteger pow, BigInteger mod, bool convert_method, long A, long B)
        {
            BigInteger[,] mas_k;
            found = found % mod;

            BigInteger t = found;
            BigInteger res = 1;

            mas_k = convert_method ? Convert_to_DBNS_1(pow, A, B)
                                   : Convert_to_DBNS_2(pow, A, B);

            if (mas_k[0, 0] == -1)
                res = Euclid_2_1(mod, t);
            else if (mas_k[0, 0] == 1)
                res = t;

            for (long i = 0; i < mas_k.GetLength(0) - 1; i++)
            {
                BigInteger u = mas_k[i, 1] - mas_k[i + 1, 1];
                BigInteger v = mas_k[i, 2] - mas_k[i + 1, 2];
                for (long j = 0; j < u; j++)
                    res = mul(res, res, mod);

                for (long j = 0; j < v; j++)
                    res = mul(mul(res, res, mod), res, mod);

                if (mas_k[i + 1, 0] < 0)
                    res = mul(res, Euclid_2_1(mod, t), mod);
                else
                    res = mul(res, t, mod);
            }

            for (long i = 0; i < mas_k[mas_k.GetLength(0) - 1, 1]; i++)
                res = mul(res, res, mod);

            for (long i = 0; i < mas_k[mas_k.GetLength(0) - 1, 2]; i++)
                res = mul(mul(res, res, mod), res, mod);
            return res;
        }

        public static BigInteger DBNS2RL(BigInteger found, BigInteger pow, BigInteger mod)
        {
            MyList<int[]> mas_k = ToDBNS2RL(pow);
            found = found % mod;

            BigInteger res = 1;
            BigInteger t = found;

            for (int i = 0; i < mas_k.Count; i++)
            {
                for (int j = 0; j < mas_k[i][1]; j++)
                    t = mul(t, t, mod);
                for (int j = 0; j < mas_k[i][2]; j++)
                    t = mul((mul(t, t, mod)), t, mod);

                if (mas_k[i][0] == 1)
                    res = mul(res, t, mod);
                else if (mas_k[i][0] == -1)
                    res = mul(res, Euclid_2_1(t, mod), mod);
            }
            return res;
        }

        public static BigInteger DBNS2LR(BigInteger found, BigInteger pow, BigInteger mod)
        {
            MyList<int[]> mas_k = ToDBNS2LR(pow);
            found = found % mod;
            BigInteger res = found;

            for (int i = mas_k.Count - 1; i > 0; i--)
            {
                for (int j = 0; j < mas_k[i][1]; j++)
                    res = mul(res, res, mod);
                for (int j = 0; j < mas_k[i][2]; j++)
                    res = mul(mul(res,  res, mod), res, mod);

                if (mas_k[i][0] == 1)
                    res = mul(res, found, mod);
                else if (mas_k[i][0] == -1)
                    res = mul(res, Euclid_2_1(found, mod), mod);
            }
            for (int j = 0; j < mas_k[0][1]; j++)
                res = mul(res, res, mod);
            for (int j = 0; j < mas_k[0][2]; j++)
                res = mul(mul(res,  res, mod), res, mod);
            return res;
        }

        public static BigInteger Bonus1(BigInteger found, BigInteger pow, BigInteger mod)
        {
            bool mont = AdditionalParameters.montFlag;
            BigInteger res, t;
            int powLen;
            string pow_bin;
            found = found % mod;
            pow_bin = ConvToBinary(pow);
            res = 1;
            t = found;
            powLen = (int)(Log((double)pow, 2));

            if (mont)
            {
                MyList<BigInteger> parameters = toMontgomeryDomain(ref t, ref res, mod);
                for (int i = powLen; 0 <= i; i--)
                {
                    res = MontgomeryMultDomain(res, res, mod, parameters);
                    if (pow_bin[powLen - (int) i] == '1')
                        res = MontgomeryMultDomain(t, res, mod, parameters);
                }
                res = outMontgomeryDomain(res, mod, parameters);
            }
            else
            {
                for (int i = powLen; 0 <= i; i--)
                {
                    res = res * res % mod;
                    if (pow_bin[powLen - (int) i] == '1')
                        res = t * res % mod;
                }
            }

            return res;
        }
        public static BigInteger Bonus2(BigInteger found, BigInteger pow, BigInteger mod)
        {
            bool mont = AdditionalParameters.montFlag;
            BigInteger res, t;
            int powLen;
            string pow_bin;
            found = found % mod;
            pow_bin = ConvToBinary(pow);
            res = 1;
            t = found;
            powLen = (int)(Log((double)pow, 2));

            if (mont)
            {
                MyList<BigInteger> parameters = toMontgomeryDomain(ref t, ref res, mod);
                for (int i = powLen; 0 <= i; i--)
                {
                    res = MontgomeryMultDomain(res, res, mod, parameters);
                    if (pow_bin[powLen - (int) i] == '1')
                        res = MontgomeryMultDomain(t, res, mod, parameters);
                }
                res = outMontgomeryDomain(res, mod, parameters);
            }
            else
            {
                for (int i = powLen; 0 <= i; i--)
                {
                    res = res * res % mod;
                    if (pow_bin[powLen - (int) i] == '1')
                        res = t * res % mod;
                }
            }
            return res;
        }
        #endregion
        #region window
        private static MyList<BigInteger> Table(BigInteger found, BigInteger pow, int w, BigInteger mod)
        {
            var table = new MyList<BigInteger>();

            table.Add(found);
            for (BigInteger i = 0; i < BigInteger.Parse((Pow(2, w) - 2).ToString()); i++)
                table.Add((table[i] * found) % mod);
            return table;
        }

        public static BigInteger WindowRL(BigInteger found, BigInteger pow,  BigInteger mod, int w, out double table_time)
        {
            // 3.1
            bool mont = AdditionalParameters.montFlag;
            found = found % mod;
            Stopwatch stw = new Stopwatch();


            int i;
            BigInteger a = found;
            BigInteger res = 1;

            List<string> bins = windows(ConvToBinary(pow), w);

            if (mont)
            {
                MyList <BigInteger> parameters = MontgomeryMethods.toMontgomeryDomain(ref a, ref res, mod);

                stw.Start();
                int count_elem = 1 << w;
                MyList<BigInteger> table = new MyList<BigInteger>();
                for (i = 1; i <= count_elem; i++)
                    table.Add(res);
                stw.Stop();

                int index;
                for (i = bins.Count - 1; i > -1; i--)
                {
                    index = Convert.ToInt32(bins[i], 2);

                    if (index != 0)
                        table[index - 1] = MontgomeryMultDomain(table[index - 1], a, mod, parameters);

                    for (int k = 0; k < w; k++)
                        a = MontgomeryMultDomain(a, a, mod, parameters);
                }
                                
                stw.Start();
                for (i = count_elem - 1; i > 0; i--)
                {
                    table[i - 1] = MontgomeryMultDomain(table[i - 1], table[i], mod, parameters);
                    table[0] = MontgomeryMultDomain(table[0], table[i], mod, parameters);
                }
                stw.Stop();
                table_time = stw.Elapsed.TotalMilliseconds;

                res = outMontgomeryDomain(table[0], mod, parameters);
                return res;
            }
            else
            {
                stw.Start();
                int count_elem = 1 << w;
                MyList<BigInteger> table = new MyList<BigInteger>();
                for (i = 1; i <= count_elem; i++)
                    table.Add(1);
                stw.Stop();

                int index;
                for (i = bins.Count - 1; i > -1; i--)
                {
                    index = Convert.ToInt32(bins[i], 2);

                    if (index != 0)
                        table[index - 1] = table[index - 1] * a % mod;

                    for (int k = 0; k < w; k++)
                        a = a * a % mod;
                }

                stw.Start();
                for (i = count_elem - 1; i > 0; i--)
                {
                    table[i - 1] = table[i - 1] * table[i] % mod;
                    table[0] = table[0] * table[i] % mod;
                }
                stw.Stop();
                table_time = stw.Elapsed.TotalMilliseconds;

                return table[0];
            }

            /*
            // залишити закоментованим
            Stopwatch stw = new Stopwatch();
            found = found % mod;
            stw.Start();
            MyList<BigInteger> table = Table(found, pow, w, mod);
            stw.Stop();

            table_time = stw.Elapsed.TotalMilliseconds;

            BigInteger res = 1;

            List<string> bins = windows(ConvToBinary(pow), w);

            for (int i = bins.Count - 1; i > -1; i--)
            {
                int c = Convert.ToInt32(bins[i], 2);
                if (c != 0)
                    res = mul(res,  table[c - 1], mod);

                for (int k = 0; k < w; k++)
                    for (int j = 0; j < table.Count; j++)
                        table[j] = mul(table[j], table[j], mod);
            }
            return res;
            */
        }

        public static BigInteger WindowRL_Dic(BigInteger found, BigInteger pow,  BigInteger mod, int w, out double table_time)
        {
            // 3.2. Dic
            bool mont = AdditionalParameters.montFlag;
            found = found % mod;

            int i;
            int count_elem = 1 << w;
            Dictionary<string, BigInteger> table = new Dictionary<string, BigInteger>();

            string temp;
            BigInteger res = 1;
            BigInteger a = found;

            string pow_bin = ConvToBinary(pow);
            string str_null = "";
            string temp_previous;
            string str_one = "";

            Stopwatch stw = new Stopwatch();

            if (mont)
            {
                MyList <BigInteger> parameters = MontgomeryMethods.toMontgomeryDomain(ref a, ref res, mod);

                stw.Start();
                for (i = 1; i < count_elem; i++)
                {
                    temp = ConvToBinary(i);
                    while (temp.Length != w)
                        temp = "0" + temp;
                    table.Add(temp, res);
                }
                stw.Stop();

                while (pow_bin.Length % w != 0)
                    pow_bin = "0" + pow_bin;

                for (i = 0; i < w; i++)
                    str_null = "0" + str_null;


                for (i = pow_bin.Length - w; i >= 0; i = i - w)
                {
                    string subs = pow_bin.Substring(i, w);
                    if (subs != str_null) table[subs] = MontgomeryMultDomain(table[subs], a, mod, parameters);

                    for (int k = 0; k < w; k++)
                        a = MontgomeryMultDomain(a, a, mod, parameters);
                }

                stw.Start();

                for (i = 1; i < w; i++)
                    str_one = "0" + str_one;
                str_one = str_one + "1";

                for (i = count_elem - 1; i > 1; i--)
                {
                    temp = ConvToBinary(i);
                    while (temp.Length != w)
                        temp = "0" + temp;
                    temp_previous = ConvToBinary(i - 1);
                    while (temp_previous.Length != w)
                        temp_previous = "0" + temp_previous;
                    table[temp_previous] = MontgomeryMultDomain(table[temp_previous], table[temp], mod, parameters);
                    table[str_one] = MontgomeryMultDomain(table[str_one], table[temp], mod, parameters);
                }
                stw.Stop();
                table_time = stw.Elapsed.TotalMilliseconds;

                res = outMontgomeryDomain(table[str_one], mod, parameters);
                return res;
            }
            else
            {
                stw.Start();
                for (i = 1; i < count_elem; i++)
                {
                    temp = ConvToBinary(i);
                    while (temp.Length != w)
                        temp = "0" + temp;
                    table.Add(temp, 1);
                }
                stw.Stop();

                while (pow_bin.Length % w != 0)
                    pow_bin = "0" + pow_bin;

                for (i = 0; i < w; i++)
                    str_null = "0" + str_null;


                for (i = pow_bin.Length - w; i >= 0; i = i - w)
                {
                    string subs = pow_bin.Substring(i, w);
                    if (subs != str_null) table[subs] = table[subs] * a % mod;

                    for (int k = 0; k < w; k++)
                        a = a * a % mod;
                }

                stw.Start();

                for (i = 1; i < w; i++)
                    str_one = "0" + str_one;
                str_one = str_one + "1";

                for (i = count_elem - 1; i > 1; i--)
                {
                    temp = ConvToBinary(i);
                    while (temp.Length != w)
                        temp = "0" + temp;
                    temp_previous = ConvToBinary(i - 1);
                    while (temp_previous.Length != w)
                        temp_previous = "0" + temp_previous;
                    table[temp_previous] = table[temp_previous] * table[temp] % mod;
                    table[str_one] = table[str_one] * table[temp] % mod;
                }
                stw.Stop();
                table_time = stw.Elapsed.TotalMilliseconds;

                return table[str_one];
            }
        }

        public static BigInteger WindowLR(BigInteger found, BigInteger pow, BigInteger mod, int w, out double table_time)
        {
            bool mont = AdditionalParameters.montFlag;
            Stopwatch stw = new Stopwatch();
            BigInteger res = 1;

            found = found % mod;
            List<string> bins = windows(ConvToBinary(pow), w);

            if (mont)
            {
                MyList <BigInteger> parameters = MontgomeryMethods.toMontgomeryDomain(ref found, ref res, mod);

                stw.Start();

                MyList<BigInteger> table = new MyList<BigInteger>();
                table.Add(found);

                int count = (1 << w) - 2;
                for (BigInteger i = 0; i < count; i++)
                    table.Add(MontgomeryMultDomain(table[i], found, mod, parameters));

                stw.Stop();

                table_time = stw.Elapsed.TotalMilliseconds;

                for (int i = 0; i < bins.Count; i++)
                {
                    for (int k = 0; k < w; k++)
                        res = MontgomeryMultDomain(res, res, mod, parameters);

                    int c = Convert.ToInt32(bins[i], 2);
                    if (c != 0) res = MontgomeryMultDomain(res, table[c - 1], mod, parameters);
                }

                res = outMontgomeryDomain(res, mod, parameters);
            }
            else
            {
                stw.Start();

                MyList<BigInteger> table = new MyList<BigInteger>();
                table.Add(found);

                int count = (1 << w) - 2;
                for (BigInteger i = 0; i < count; i++)
                    table.Add((table[i] * found) % mod);

                stw.Stop();

                table_time = stw.Elapsed.TotalMilliseconds;

                for (int i = 0; i < bins.Count; i++)
                {
                    for (int k = 0; k < w; k++)
                        res = mul(res, res, mod);

                    int c = Convert.ToInt32(bins[i], 2);
                    if (c != 0) res = mul(res, table[c - 1], mod);
                }
            }
            return res;
        }

        public static BigInteger WindowLR_Dic(BigInteger found, BigInteger pow, BigInteger mod, int w, out double table_time)
        {
            bool mont = AdditionalParameters.montFlag;
            Stopwatch stw = new Stopwatch();
            found = found % mod;

            BigInteger res = 1;

            string pow_bin = ConvToBinary(pow);
            string str_null = "";


            if(mont)
            {
                MyList <BigInteger> parameters = MontgomeryMethods.toMontgomeryDomain(ref found, ref res, mod);

                stw.Start();

                Dictionary < string, BigInteger> table = new Dictionary<string, BigInteger>();
                string temp = ConvToBinary(1);
                int temp_size = (1 << w) - 1;
                BigInteger temp_value;

                while (temp.Length != w)
                    temp = "0" + temp;

                table.Add(temp, found);
                temp_value = found;

                for (int i = 2; i <= temp_size; i++)
                {
                    temp = ConvToBinary(i);
                    while (temp.Length != w)
                        temp = "0" + temp;
                    temp_value = MontgomeryMultDomain(temp_value, found, mod, parameters);
                    table.Add(temp, temp_value);
                }

                stw.Stop();

                table_time = stw.Elapsed.TotalMilliseconds;

                while (pow_bin.Length % w != 0)
                    pow_bin = "0" + pow_bin;

                for (int i = 0; i < w; i++)
                    str_null = "0" + str_null;

                for (int i = 0; i < pow_bin.Length; i = i + w)
                {
                    for (int k = 0; k < w; k++)
                        res = MontgomeryMultDomain(res, res, mod, parameters);

                    string subs = pow_bin.Substring(i, w);
                    if (subs != str_null) res = MontgomeryMultDomain(res, table[subs], mod, parameters);
                }

                res = outMontgomeryDomain(res, mod, parameters);
            }
            else
            {
                stw.Start();

                Dictionary < string, BigInteger> table = new Dictionary<string, BigInteger>();
                string temp = ConvToBinary(1);
                int temp_size = (1 << w) - 1;
                BigInteger temp_value;

                while (temp.Length != w)
                    temp = "0" + temp;

                table.Add(temp, found);
                temp_value = found;

                for (int i = 2; i <= temp_size; i++)
                {
                    temp = ConvToBinary(i);
                    while (temp.Length != w)
                        temp = "0" + temp;
                    temp_value = temp_value * found % mod;
                    table.Add(temp, temp_value);
                }

                stw.Stop();

                table_time = stw.Elapsed.TotalMilliseconds;

                while (pow_bin.Length % w != 0)
                    pow_bin = "0" + pow_bin;

                for (int i = 0; i < w; i++)
                    str_null = "0" + str_null;

                for (int i = 0; i < pow_bin.Length; i = i + w)
                {
                    for (int k = 0; k < w; k++)
                        res = res * res % mod;

                    string subs = pow_bin.Substring(i, w);
                    if (subs != str_null) res = res * table[subs] % mod;
                }
            }
            return res;

        }

        #region Не актуальні методи
        public static BigInteger WindowLRMod1(BigInteger found, BigInteger pow, BigInteger mod, int w, out double table_time)
        {
            int i, t, powLen;
            Stopwatch stw;
            BigInteger res;
            List<BigInteger> table;
            string pow_bin = ConvToBinary(pow);
            found = found % mod;

            stw = new Stopwatch();
            stw.Start();
            table = new List<BigInteger>();

            table.Add(found);
            for (i = 1; i < w; i++)
                table.Add(mul(table[i - 1], table[i - 1], mod));
            stw.Stop();
            table_time = stw.Elapsed.TotalMilliseconds;

            res = 1;
            i = (int)(Log((double)pow, 2));
            powLen = i + 1;
            while (i >= 0)
            {
                res = mul(res, res, mod);
                if ('1' == pow_bin[powLen - 1 - (int)i])
                {
                    if (0 < i && '0' == pow_bin[powLen - (int)i - 1])
                    {
                        t = 1;
                        while (t < w
                            && t < i
                            && '0' == pow_bin[powLen - (int)i - t])
                        {
                            t++;
                        }
                        res = BinaryRL(res, 1 << (t - 1), mod);
                        res = mul(res, table[t - 1], mod);
                        i = i - t + 1;
                    }
                    else
                    {
                        res = mul(res, found, mod);
                    }
                }
                --i;
            }
            return res;
        }

        public static BigInteger WindowLRMod2(BigInteger found, BigInteger pow, BigInteger mod, int w, out double table_time)
        {
            int i, t, powLen;
            Stopwatch stw;
            BigInteger res;
            List<BigInteger> table;
            string pow_bin = ConvToBinary(pow);

            stw = new Stopwatch();
            found = found % mod;
            stw.Start();
            table = new List<BigInteger>();

            table.Add(found);
            for (i = 1; i <= w; i++)
                table.Add(BinaryRL(found, (1 << i) - 1, mod));
            stw.Stop();
            table_time = stw.Elapsed.TotalMilliseconds;

            res = 1;
            i = (int)(Log((double)pow, 2));
            powLen = i + 1;
            while (i >= 0)
            {
                res = mul(res, res, mod);
                if ('1' == pow_bin[powLen - 1 - (int)i])
                {
                    t = 1;
                    while (t < w && t < i && '1' == pow_bin[powLen - (int)i + t - 1])
                        t++;
                    res = BinaryRL(res, 1 << (t - 1), mod);
                    res = mul(res, table[t], mod);
                    i = i - t + 1;
                }

                    i--;
            }
            return res;
        }

        public static BigInteger WindowLRMod3(BigInteger found, BigInteger pow, BigInteger mod, int w, out double table_time)
        {
            int i, t, powLen;
            Stopwatch stw;
            BigInteger res;
            List<BigInteger> table;
            string pow_bin = ConvToBinary(pow);

            stw = new Stopwatch();
            found = found % mod;
            stw.Start();
            table = new List<BigInteger>();

            table.Add(found);
            for (i = 2; i <= w; i++)
                table.Add(BinaryRL(found, (1 << (i - 1)) + 1, mod));
            stw.Stop();
            table_time = stw.Elapsed.TotalMilliseconds;

            res = 1;
            i = (int)(Log((double)pow, 2));
            powLen = i + 1;
            while (i >= 0)//>=
            {
                res = mul(res, res, mod);
                if ('1' == pow_bin[powLen - i - 1])
                {
                    if ((i == 0) || (i > 0 && '0' == pow_bin[powLen - i ]))
                    {
                        t = 2;
                        while (t < w && t <= i && '0' == pow_bin[powLen - i + t - 1])
                            t++;
                        if (t < w && t <= i)
                            t++;
                        else
                            t = 0;

                        if (t > 0)
                        {
                            res = BinaryRL(res, 1 << (t - 1), mod);
                            res = mul(res, table[t - 1], mod);
                            i = i - t + 1;
                        }
                        else
                            res = mul(res, table[0], mod);

                    }
                    else
                    {
                        res = mul(res, res, mod);
                        res = mul(res, table[1], mod);
                        i--;
                    }

                }
                i--;
            }
            return res;
        }

        public static BigInteger WindowLRMod(BigInteger found, BigInteger pow, BigInteger mod, int w, out double table_time)
        {
            int i, t, powLen;
            Stopwatch stw;
            BigInteger res;
            string pow_bin;
            BigInteger[] table1, table2;

            stw = new Stopwatch();
            found = found % mod;
            stw.Start();

            table1 = new BigInteger[w+1];
            table2 = new BigInteger[w+1];
            table1[0] = table2[0] = found;
            for (i = 1; i < w; i++) {
                table1[i] = BinaryRL(found, (1 << (i + 1)) - 1, mod);
                table2[i] = BinaryRL(found, (1 << i) + 1, mod);
            }
            stw.Stop();
            table_time = stw.Elapsed.TotalMilliseconds;

            pow_bin = ConvToBinary(pow);
            res = 1;
            i = (int)(Log((double)pow, 2));
            powLen = i + 1;
            while (i >= 0)
            {
                if ('1' == pow_bin[powLen - i - 1])
                {
                    if ((i == 0) || (i > 0 && '0' == pow_bin[powLen - i ]))
                    {
                        t = 2;
                        while (t < w && t <= i && '0' == pow_bin[powLen - i + t - 1])
                            t++;
                        if (t < w && t <= i)
                            t++;
                        else
                            t = 0;

                        if (t > 0)
                        {
                            res = BinaryRL(res, 1 << t, mod);
                            res = mul(res, table2[t - 1], mod);
                            i = i - t;
                        }
                        else
                        {
                            res = mul(res, res, mod);
                            res = mul(res, table2[0], mod);
                            i--;
                        }
                    }
                    else
                    {
                        t = 1;
                        while (t < w && t < i && '1' == pow_bin[powLen - (int)i + t - 1])
                            t++;
                        res = BinaryRL(res, 1 << t, mod);
                        res = mul(res, table1[t - 1], mod);
                        i = i - t;
                    }
                }
                else
                {
                    res = mul(res, res, mod);
                    i--;
                }

            }
            return res;
        }

        public static BigInteger WindowLRMod1_Shift(BigInteger found, BigInteger pow, BigInteger mod, int w, out double table_time)
        {
            int i, t;
            Stopwatch stw;
            BigInteger res;
            List<BigInteger> table;
            var pow_bin = ConvToBinary(pow);

            stw = new Stopwatch();
            found = found % mod;
            stw.Start();
            table = new List<BigInteger>();

            table.Add(found);
            for (i = 1; i < w; i++)
                table.Add(mul(table[i - 1], table[i - 1], mod));
            stw.Stop();
            table_time = stw.Elapsed.TotalMilliseconds;

            res = 1;
            i = (int)(Math.Log((double)pow, 2));
            while (i >= 0)
            {
                res = mul(res, res, mod);
                if (1 == ((pow >> i) & 1))
                {
                    if (0 < i && 0 == ((pow >> (i - 1)) & 1))
                    {
                        t = 1;
                        while (t < w
                            && t < i
                            && 0 == ((pow >> (i - t)) & 1))
                        {
                            t++;
                        }
                        res = BinaryRL(res, 1 << (t - 1), mod);
                        res = mul(res, table[t - 1], mod);
                        i = i - t + 1;
                    }
                    else
                    {
                        res = mul(res, found, mod);
                        //--i;
                    }
                }
                --i;
            }
            return res;
        }

        public static BigInteger WindowLRMod2_Shift(BigInteger found, BigInteger pow, BigInteger mod, int w, out double table_time)
        {
            int i, t;
            Stopwatch stw;
            BigInteger res;
            List<BigInteger> table;
            string pow_bin = ConvToBinary(pow);

            stw = new Stopwatch();
            found = found % mod;
            stw.Start();
            table = new List<BigInteger>();

            table.Add(found);
            for (i = 1; i <= w; i++)
                table.Add(BinaryRL(found, (1 << i) - 1, mod));
            stw.Stop();
            table_time = stw.Elapsed.TotalMilliseconds;

            res = 1;
            i = (int)(Log((double)pow, 2));
            while (i >= 0)
            {
                res = mul(res, res, mod);
                if (1 == ((pow >> i) & 1))
                {
                    t = 1;
                    while (t < w && t < i && 1 == ((pow >> (i - t)) & 1))
                        t++;
                    res = BinaryRL(res, 1 << (t - 1), mod);
                    res = mul(res, table[t], mod);
                    i = i - t + 1;
                }

                i--;
            }
            return res;
        }

        public static BigInteger WindowLRMod3_Shift(BigInteger found, BigInteger pow, BigInteger mod, int w, out double table_time)
        {
            int i, t;
            Stopwatch stw;
            BigInteger res;
            List<BigInteger> table;
            var pow_bin = ConvToBinary(pow);

            stw = new Stopwatch();
            found = found % mod;
            stw.Start();
            table = new List<BigInteger>();

            table.Add(found);
            for (i = 2; i <= w; i++)
                table.Add(BinaryRL(found, (1 << (i - 1)) + 1, mod));
            stw.Stop();
            table_time = stw.Elapsed.TotalMilliseconds;

            res = 1;
            i = (int)(Log((double)pow, 2));
            while (i >= 0)//>=
            {
                res = mul(res, res, mod);
                if (1 == ((pow >> i) & 1))
                {
                    if (0 == ((pow >> (i - 1)) & 1))
                    {
                        t = 2;
                        if (t < i)
                        {
                            while (t < w && 0 == ((pow >> (i - t)) & 1))
                                t++;
                            if (t < w)
                                t++;
                            else
                                t = 0;

                        }
                        else
                        {
                            t = 0;
                        }

                        if (t > 0)
                        {
                            res = BinaryRL(res, (1 <<(t - 1)), mod);
                            res = mul(res, table[t - 1], mod);
                            i = i - t + 1;
                        }
                        else
                        {
                            res = mul(res, table[0], mod);
                        }

                    }
                    else
                    {
                        res = mul(res, res, mod);
                        res = mul(res, table[1], mod);
                        i--;
                    }

                }
                i--;
            }
            return res;
        }

        public static BigInteger WindowLRMod_Shift(BigInteger found, BigInteger pow, BigInteger mod, int w, out double table_time)
        {
            int i;
            int t;
            Stopwatch stw;
            BigInteger res;
            string pow_bin;
            BigInteger[] table1, table2;

            stw = new Stopwatch();
            found = found % mod;
            stw.Start();

            table1 = new BigInteger[w+1];
            table2 = new BigInteger[w+1];
            table1[0] = table2[0] = found;
            for (i = 1; i < w; i++) {
                table1[i] = BinaryRL(found, (1 << (i + 1)) - 1, mod);
                table2[i] = BinaryRL(found, (1 << i) + 1, mod);
            }
            stw.Stop();
            table_time = stw.Elapsed.TotalMilliseconds;

            pow_bin = ConvToBinary(pow);
            res = 1;
            i = (int)(Log((double)pow, 2));
            while (i >= 0)
            {
                if (1 == ((pow >> i) & 1))
                {
                    if (0 == ((pow >> (i-1)) & 1))
                    {
                        t = 2;
                        if (t < i)
                        {
                            while (t < w && 0 == ((pow >> (i - t)) & 1))
                                t++;
                            if (t < w)
                                t++;
                            else
                                t = 0;

                        }
                        else
                        {
                            t = 0;
                        }

                        if (t > 0)
                        {
                            res = BinaryRL(res, 1 << t, mod);
                            res = mul(res, table2[t - 1], mod);
                            i = i - t;
                        }
                        else
                        {
                            res = mul(res, res, mod);
                            res = mul(res, table2[0], mod);
                            i--;
                        }
                    }
                    else
                    {
                        t = 1;
                        while (t < w && t < i && 1 == ((pow >> (i - t)) & 1))
                            t++;
                        res = BinaryRL(res, 1 << t, mod);
                        res = mul(res, table1[t - 1], mod);
                        i = i - t;
                    }
                }
                else
                {
                    res = mul(res, res, mod);
                    i--;
                }

            }
            return res;
        }

        public static BigInteger WindowLRMod2_Upgrade(BigInteger found, BigInteger pow, BigInteger mod, int w, out double table_time)
        {
            int i, t, powLen;
            Stopwatch stw;
            BigInteger res;
            List<BigInteger> table;
            string pow_bin = ConvToBinary(pow);

            stw = new Stopwatch();
            found = found % mod;
            stw.Start();
            table = new List<BigInteger>();
            table.Add(found);
            for (i = 1; i <= w; i++)
                table.Add(BinaryRL(found, (1 << i) - 1, mod));
            stw.Stop();
            table_time = stw.Elapsed.TotalMilliseconds;

            res = 1;
            i = (int)(Log((double)pow, 2));
            powLen = i + 1;
            while (i >= 0)
            {
                res = (res * res) % mod;
                if ('1' == pow_bin[powLen - 1 - (int)i])
                {
                    t = 1;
                    while (t < w && t < i && '1' == pow_bin[powLen - (int)i + t - 1])
                        t++;
                    for (int j = 1; j <= t - 1; j++)
                        res = res * res % mod;
                    res = (res * table[t]) % mod;
                    i = i - t + 1;
                }

                i--;
            }
            return res;
        }

        public static BigInteger WindowLRMod3_Upgrade(BigInteger found, BigInteger pow, BigInteger mod, int w, out double table_time)
        {
            int i, t, powLen;
            Stopwatch stw;
            BigInteger res;
            List<BigInteger> table;
            string pow_bin = ConvToBinary(pow);

            stw = new Stopwatch();
            found = found % mod;
            stw.Start();
            table = new List<BigInteger>();
            table.Add(found);
            for (i = 2; i <= w; i++)
                table.Add(BinaryRL(found, (1 << (i - 1)) + 1, mod));
            stw.Stop();
            table_time = stw.Elapsed.TotalMilliseconds;

            res = 1;
            i = (int)(Log((double)pow, 2));
            powLen = i + 1;
            while (i >= 0)//>=
            {
                res = res * res % mod;
                if ('1' == pow_bin[powLen - i - 1])
                {
                    if ((i == 0) || (i > 0 && '0' == pow_bin[powLen - i ]))
                    {
                        t = 2;
                        while (t < w && t <= i && '0' == pow_bin[powLen - i + t - 1])
                            t++;
                        if (t < w && t <= i)
                            t++;
                        else
                            t = 0;

                        if (t > 0)
                        {
                            for (int j = 1; j <= t - 1; j++)
                                res = res * res % mod;
                            res = res * table[t - 1] % mod;
                            i = i - t + 1;
                        }
                        else
                            res = res * table[0] % mod;

                    }
                    else
                    {
                        res = res * res % mod;
                        res = res * table[1] % mod;
                        i--;
                    }

                }
                i--;
            }
            return res;
        }

        public static BigInteger WindowLRMod_Upgrade(BigInteger found, BigInteger pow, BigInteger mod, int w, out double table_time)
        {
            int i, t, powLen;
            Stopwatch stw;
            BigInteger res;
            string pow_bin;
            BigInteger[] table1, table2;

            stw = new Stopwatch();
            found = found % mod;
            stw.Start();
            table1 = new BigInteger[w+1];
            table2 = new BigInteger[w+1];
            table1[0] = table2[0] = found;
            for (i = 1; i < w; i++) {
                table1[i] = BinaryRL(found, (1 << (i + 1)) - 1, mod);
                table2[i] = BinaryRL(found, (1 << i) + 1, mod);
            }
            stw.Stop();
            table_time = stw.Elapsed.TotalMilliseconds;

            pow_bin = ConvToBinary(pow);
            res = 1;
            i = (int)(Log((double)pow, 2));
            powLen = i + 1;
            while (i >= 0)
            {
                if ('1' == pow_bin[powLen - i - 1])
                {
                    if ((i == 0) || (i > 0 && '0' == pow_bin[powLen - i ]))
                    {
                        t = 2;
                        while (t < w && t <= i && '0' == pow_bin[powLen - i + t - 1])
                            t++;
                        if (t < w && t <= i)
                            t++;
                        else
                            t = 0;

                        if (t > 0)
                        {
                            for (int j = 1; j <= t; j++)
                                res = res * res % mod;
                            res = res * table2[t - 1] % mod;
                            i = i - t;
                        }
                        else
                        {
                            res = res * res % mod;
                            res = res * table2[0] % mod;
                            i--;
                        }
                    }
                    else
                    {
                        t = 1;
                        while (t < w && t < i && '1' == pow_bin[powLen - (int)i + t - 1])
                            t++;
                        for (int j = 1; j <= t; j++)
                            res = res * res % mod;
                        res = res * table1[t - 1] % mod;
                        i = i - t;
                    }
                }
                else
                {
                    res = res * res % mod;
                    i--;
                }

            }
            return res;
        }

        public static BigInteger WindowLRMod2_NoBinary(BigInteger found, BigInteger pow, BigInteger mod, int w, out double table_time)
        {
            int i, t, powLen;
            Stopwatch stw;
            BigInteger res, temp;
            List<BigInteger> table;
            string pow_bin = ConvToBinary(pow);

            stw = new Stopwatch();
            found = found % mod;
            temp = found;
            stw.Start();
            table = new List<BigInteger>();
            table.Add(found);
            table.Add(found);
            for (i = 2; i <= w; i++)
            {
                found = found * found % mod;
                found = found * temp % mod;
                table.Add(found);
            }


            stw.Stop();
            table_time = stw.Elapsed.TotalMilliseconds;

            res = 1;
            i = (int)(Log((double)pow, 2));
            powLen = i + 1;
            while (i >= 0)
            {
                res = (res * res) % mod;
                if ('1' == pow_bin[powLen - 1 - (int)i])
                {
                    t = 1;
                    while (t < w && t < i && '1' == pow_bin[powLen - (int)i + t - 1])
                        t++;
                    for (int j = 1; j <= t - 1; j++)
                        res = res * res % mod;
                    res = (res * table[t]) % mod;
                    i = i - t + 1;
                }

                i--;
            }
            return res;
        }

        public static BigInteger WindowLRMod3_NoBinary(BigInteger found, BigInteger pow, BigInteger mod, int w, out double table_time)
        {
            int i, t, powLen;
            Stopwatch stw;
            BigInteger res, temp;
            List<BigInteger> table;
            string pow_bin = ConvToBinary(pow);

            stw = new Stopwatch();
            found = found % mod;
            stw.Start();

            table = new List<BigInteger>();
            table.Add(found);
            temp = found;
            for (i = 2; i <= w; i++)
            {
                found = found * found % mod;
                table.Add(found * temp % mod);
            }

            stw.Stop();
            table_time = stw.Elapsed.TotalMilliseconds;

            res = 1;
            i = (int)(Log((double)pow, 2));
            powLen = i + 1;
            while (i >= 0)//>=
            {
                res = res * res % mod;
                if ('1' == pow_bin[powLen - i - 1])
                {
                    if ((i == 0) || (i > 0 && '0' == pow_bin[powLen - i ]))
                    {
                        t = 2;
                        while (t < w && t <= i && '0' == pow_bin[powLen - i + t - 1])
                            t++;
                        if (t < w && t <= i)
                            t++;
                        else
                            t = 0;

                        if (t > 0)
                        {
                            for (int j = 1; j <= t - 1; j++)
                                res = res * res % mod;
                            res = res * table[t - 1] % mod;
                            i = i - t + 1;
                        }
                        else
                            res = res * table[0] % mod;

                    }
                    else
                    {
                        res = res * res % mod;
                        res = res * table[1] % mod;
                        i--;
                    }

                }
                i--;
            }
            return res;
        }

        public static BigInteger WindowLRMod_NoBinary(BigInteger found, BigInteger pow, BigInteger mod, int w, out double table_time)
        {
            int i, j, t, powLen;
            Stopwatch stw;
            BigInteger res, temp, found2;
            string pow_bin;
            BigInteger[] table1, table2;

            stw = new Stopwatch();
            found = found % mod;
            stw.Start();
            table1 = new BigInteger[w+1];
            table2 = new BigInteger[w+1];
            temp = table1[0] = table2[0] = found;
            found2 = found;
            for (i = 1; i < w; i++)
            {
                found = found * found % mod;
                found = found * temp % mod;

                table1[i] = found;

                found2 = found2 * found2 % mod;

                table2[i] = found2 * temp % mod;

            }
            stw.Stop();
            table_time = stw.Elapsed.TotalMilliseconds;

            pow_bin = ConvToBinary(pow);
            res = 1;
            i = (int)(Log((double)pow, 2));
            powLen = i + 1;
            while (i >= 0)
            {
                if ('1' == pow_bin[powLen - i - 1])
                {
                    if ((i == 0) || (i > 0 && '0' == pow_bin[powLen - i ]))
                    {
                        t = 2;
                        while (t < w && t <= i && '0' == pow_bin[powLen - i + t - 1])
                            t++;
                        if (t < w && t <= i)
                            t++;
                        else
                            t = 0;

                        if (t > 0)
                        {
                            for (j = 1; j <= t; j++)
                                res = res * res % mod;
                            res = res * table2[t - 1] % mod;
                            i = i - t;
                        }
                        else
                        {
                            res = res * res % mod;
                            res = res * table2[0] % mod;
                            i--;
                        }
                    }
                    else
                    {
                        t = 1;
                        while (t < w && t < i && '1' == pow_bin[powLen - (int)i + t - 1])
                            t++;

                        for (j = 1; j <= t; j++)
                            res = res * res % mod;
                        res = res * table1[t - 1] % mod;
                        i = i - t;
                    }
                }
                else
                {
                    res = res * res % mod;
                    i--;
                }

            }
            return res;
        }
        #endregion
        
        public static BigInteger WindowLRMod1_Upgrade(BigInteger found, BigInteger pow, BigInteger mod, int w, out double table_time)
        {
            bool mont = AdditionalParameters.montFlag;
            int i, t, powLen;
            Stopwatch stw;
            BigInteger res;
            List<BigInteger> table;
            var pow_bin = ConvToBinary(pow);

            stw = new Stopwatch();
            found = found % mod;
            res = 1;

            if (mont)
            {
                MyList<BigInteger> parameters = toMontgomeryDomain(ref found, ref res, mod);

                stw.Start();
                table = new List<BigInteger>();

                table.Add(found);
                for (i = 1; i < w; i++)
                    table.Add(MontgomeryMultDomain(table[i - 1], table[i - 1], mod, parameters));

                stw.Stop();
                table_time = stw.Elapsed.TotalMilliseconds;

                i = (int)(Math.Log((double)pow, 2));
                powLen = i + 1;
                while (i >= 0)
                {
                    res = MontgomeryMultDomain(res, res, mod, parameters);
                    if ('1' == pow_bin[powLen - 1 - i])
                    {
                        if (0 < i && '0' == pow_bin[powLen - i - 1])
                        {
                            t = 1;
                            while (t < w
                                   && t < i
                                   && '0' == pow_bin[powLen - i - t])
                            {
                                t++;
                            }
                            for (int j = 1; j <= t; j++)
                                res = MontgomeryMultDomain(res, res, mod, parameters);
                            res = MontgomeryMultDomain(res, table[t - 1], mod, parameters);
                            i = i - t + 1;
                        }
                        else
                        {
                            res = MontgomeryMultDomain(res, found, mod, parameters);
                        }
                    }
                    --i;
                }

                res = outMontgomeryDomain(res, mod, parameters);
            }
            else
            {
                stw.Start();
                table = new List<BigInteger>();

                table.Add(found);
                for (i = 1; i < w; i++)
                    table.Add((table[i - 1] * table[i - 1]) % mod);

                stw.Stop();
                table_time = stw.Elapsed.TotalMilliseconds;

                i = (int)(Math.Log((double)pow, 2));
                powLen = i + 1;
                while (i >= 0)
                {
                    res = res * res % mod;
                    if ('1' == pow_bin[powLen - 1 - (int) i])
                    {
                        if (0 < i && '0' == pow_bin[powLen - (int) i - 1])
                        {
                            t = 1;
                            while (t < w
                                   && t < i
                                   && '0' == pow_bin[powLen - (int) i - t])
                            {
                                t++;
                            }
                            for (int j = 1; j <= t; j++)
                                res = res * res % mod;
                            res = (res * table[t - 1]) % mod;
                            i = i - t + 1;
                        }
                        else
                        {
                            res = (res * found) % mod;
                        }
                    }
                    --i;
                }
            }
            return res;
        }

        public static BigInteger WindowLRMod2_Final(BigInteger found, BigInteger pow, BigInteger mod, int w, out double table_time)
        {
            bool mont = AdditionalParameters.montFlag;
            int i, j, t, powLen, ind;
            Stopwatch stw;
            BigInteger res, temp;
            List<BigInteger> table;
            string pow_bin = ConvToBinary(pow);

            found = found % mod;
            stw = new Stopwatch();

            res = 1;
            powLen = pow_bin.Length;

            if (mont)
            {
                MyList<BigInteger> parameters = toMontgomeryDomain(ref found, ref res, mod);
                temp = found;
                stw.Start();
                table = new List<BigInteger>();

                table.Add(found);
                for (i = 2; i <= w; i++) // нульовий елемент саме число, далі 11, 111, ...
                {
                    found = MontgomeryMultDomain(found, found, mod, parameters);
                    found = MontgomeryMultDomain(found, temp, mod, parameters);
                    table.Add(found);
                }
                stw.Stop();
                table_time = stw.Elapsed.TotalMilliseconds;

                i = 0;
                while (i < powLen)
                {
                    res = MontgomeryMultDomain(res, res, mod, parameters);
                    if (pow_bin[i] == '1')
                    {
                        t = 1; // кількість одиниць
                        ind = i + t;
                        while (t < w && ind < powLen && pow_bin[ind] == '1')
                        {
                            t++;
                            ind++;
                        }

                        for (j = 1; j < t; j++)
                            res = MontgomeryMultDomain(res, res, mod, parameters);
                        res = MontgomeryMultDomain(res, table[t - 1], mod, parameters);
                        i = i + t;
                    }
                    else
                        i++;
                }

                res = outMontgomeryDomain(res, mod, parameters);
            }
            else
            {
                temp = found;
                stw.Start();
                table = new List<BigInteger>();

                table.Add(found);
                for (i = 2; i <= w; i++) // нульовий елемент саме число, далі 11, 111, ...
                {
                    found = found * found % mod;
                    found = found * temp % mod;
                    table.Add(found);
                }
                stw.Stop();
                table_time = stw.Elapsed.TotalMilliseconds;

                i = 0;
                while (i < powLen)
                {
                    res = res * res % mod;
                    if (pow_bin[i] == '1')
                    {
                        t = 1; // кількість одиниць
                        ind = i + t;
                        while (t < w && ind < powLen && pow_bin[ind] == '1')
                        {
                            t++;
                            ind++;
                        }

                        for (j = 1; j < t; j++)
                            res = res * res % mod;
                        res = res * table[t - 1] % mod;
                        i = i + t;
                    }
                    else
                        i++;
                }
            }
            return res;
        }

        public static BigInteger WindowLRMod3_Final(BigInteger found, BigInteger pow, BigInteger mod, int w, out double table_time)
        {
            bool mont = AdditionalParameters.montFlag;
            int i, j, t, powLen, ind;
            Stopwatch stw;
            BigInteger res, temp;
            List<BigInteger> table;
            string pow_bin = ConvToBinary(pow);
            int count_zero_limit = w - 2;

            found = found % mod;
            stw = new Stopwatch();
            res = 1;
            powLen = pow_bin.Length;

            if (mont)
            {
                MyList<BigInteger> parameters = toMontgomeryDomain(ref found, ref res, mod);

                temp = found;
                stw.Start();
                table = new List<BigInteger>();

                table.Add(found);
                for (i = 2; i <= w; i++) // нульовий елемент саме число, далі 11, 101, 1001, ...
                {
                    found = MontgomeryMultDomain(found, found, mod, parameters);
                    table.Add(MontgomeryMultDomain(found, temp, mod, parameters));
                }
                stw.Stop();
                table_time = stw.Elapsed.TotalMilliseconds;


                i = 0;
                while (i < powLen)
                {
                    res = MontgomeryMultDomain(res, res, mod, parameters);
                    if (pow_bin[i] == '1')
                    {
                        i++;
                        t = 0; // кількість нулів
                        ind = i;
                        while (t <= count_zero_limit && ind < powLen && pow_bin[ind] == '0')
                        {
                            t++;
                            ind++;
                        }

                        if (t > count_zero_limit || ind == powLen)
                            t = -1;

                        if (t >= 0)
                        {
                            for (j = 0; j <= t; j++)
                                res = MontgomeryMultDomain(res, res, mod, parameters);
                            res = MontgomeryMultDomain(res, table[t + 1], mod, parameters);
                            i = i + t + 1;
                        }
                        else
                            res = MontgomeryMultDomain(res, table[0], mod, parameters);
                    }
                    else
                        i++;
                }

                res = outMontgomeryDomain(res, mod, parameters);
            }
            else
            {
                temp = found;
                stw.Start();
                table = new List<BigInteger>();

                table.Add(found);
                for (i = 2; i <= w; i++) // нульовий елемент саме число, далі 11, 101, 1001, ...
                {
                    found = found * found % mod;
                    table.Add(found * temp % mod);
                }
                stw.Stop();
                table_time = stw.Elapsed.TotalMilliseconds;


                i = 0;
                while (i < powLen)
                {
                    res = res * res % mod;
                    if (pow_bin[i] == '1')
                    {
                        i++;
                        t = 0; // кількість нулів
                        ind = i;
                        while (t <= count_zero_limit && ind < powLen && pow_bin[ind] == '0')
                        {
                            t++;
                            ind++;
                        }

                        if (t > count_zero_limit || ind == powLen)
                            t = -1;

                        if (t >= 0)
                        {
                            for (j = 0; j <= t; j++)
                                res = res * res % mod;
                            res = res * table[t + 1] % mod;
                            i = i + t + 1;
                        }
                        else
                            res = res * table[0] % mod;
                    }
                    else
                        i++;
                }
            }
            return res;
        }

        public static BigInteger WindowLRMod_Final(BigInteger found, BigInteger pow, BigInteger mod, int w, out double table_time)
        {
            bool mont = AdditionalParameters.montFlag;
            int i, j, t, powLen, ind;
            Stopwatch stw;
            BigInteger res, temp;
            string pow_bin;
            BigInteger[] table1, table2;
            int count_zero_limit = w - 2;

            found = found % mod;
            stw = new Stopwatch();
            pow_bin = ConvToBinary(pow);
            res = 1;
            powLen = pow_bin.Length;

            if (mont)
            {
                MyList<BigInteger> parameters = toMontgomeryDomain(ref found, ref res, mod);

                stw.Start();
                table1 = new BigInteger[w]; // нульовий елемент саме число, далі 11, 111, ...
                table2 = new BigInteger[w-1]; // нульовий елемент саме число, далі 101, 1001, ...

                temp = table1[0] = table2[0] = found;
                BigInteger sqr_found = MontgomeryMultDomain(found, found, mod, parameters);

                found = MontgomeryMultDomain(sqr_found, temp, mod, parameters);
                table1[1] = found; // записати 11 у двіковій системі

                if (w > 2)
                {
                    table2[1] = MontgomeryMultDomain(table1[1], sqr_found, mod, parameters); // 101
                    table1[2] = MontgomeryMultDomain(table2[1], sqr_found, mod, parameters); // 111
                }

                for (i = 4; i <= w; i++)
                {
                    table2[i - 2] = MontgomeryMultDomain(table1[i - 2], sqr_found, mod, parameters);

                    table1[i - 1] = MontgomeryMultDomain(table1[i - 2], table1[i - 2], mod, parameters);
                    table1[i - 1] = MontgomeryMultDomain(table1[i - 1], temp, mod, parameters);
                }
                stw.Stop();
                table_time = stw.Elapsed.TotalMilliseconds;

                i = 0;
                while (i < powLen)
                {
                    if (pow_bin[i] == '1')
                    {
                        i++;
                        if ((i == powLen - 1) || (i < powLen - 1 && pow_bin[i] == '0'))
                        {
                            t = 1; // кількість нулів
                            ind = i + t;
                            while (t <= count_zero_limit && ind < powLen && pow_bin[ind] == '0')
                            {
                                t++;
                                ind++;
                            }

                            if (t > count_zero_limit || ind == powLen)
                                t = 0;

                            if (t > 0)
                            {
                                for (j = 1; j <= t + 2; j++)
                                    res = MontgomeryMultDomain(res, res, mod, parameters);
                                res = MontgomeryMultDomain(res, table2[t], mod, parameters);
                                i = i + t + 1;
                            }
                            else
                            {
                                res = MontgomeryMultDomain(res, res, mod, parameters);
                                res = MontgomeryMultDomain(res, table2[0], mod, parameters);
                            }
                        }
                        else
                        {
                            t = 1; // кількість одиниць
                            ind = i + t;
                            while (t < w && ind < powLen && pow_bin[ind] == '1')
                            {
                                t++;
                                ind++;
                            }

                            for (j = 1; j <= t; j++)
                                res = MontgomeryMultDomain(res, res, mod, parameters);
                            res = MontgomeryMultDomain(res, table1[t - 1], mod, parameters);
                            i = i + t - 1;
                        }
                    }
                    else
                    {
                        res = MontgomeryMultDomain(res, res, mod, parameters);
                        i++;
                    }

                }

                res = outMontgomeryDomain(res, mod, parameters);
            }
            else
            {
                stw.Start();
                table1 = new BigInteger[w]; // нульовий елемент саме число, далі 11, 111, ...
                table2 = new BigInteger[w-1]; // нульовий елемент саме число, далі 101, 1001, ...

                temp = table1[0] = table2[0] = found;
                BigInteger sqr_found = found * found % mod;
                found = sqr_found * temp % mod;
                table1[1] = found; // записати 11 у двіковій системі

                if (w > 2)
                {
                    table2[1] = table1[1] * sqr_found % mod; // 101
                    table1[2] = table2[1] * sqr_found % mod; // 111
                }

                for (i = 4; i <= w; i++)
                {
                    table2[i - 2] = table1[i - 2] * sqr_found % mod;

                    table1[i - 1] = table1[i - 2] * table1[i - 2] % mod;
                    table1[i - 1] = table1[i - 1] * temp % mod;
                }
                stw.Stop();
                table_time = stw.Elapsed.TotalMilliseconds;

                i = 0;
                while (i < powLen)
                {
                    if (pow_bin[i] == '1')
                    {
                        i++;
                        if ((i == powLen - 1) || (i < powLen - 1 && pow_bin[i] == '0'))
                        {
                            t = 1; // кількість нулів
                            ind = i + t;
                            while (t <= count_zero_limit && ind < powLen && pow_bin[ind] == '0')
                            {
                                t++;
                                ind++;
                            }

                            if (t > count_zero_limit || ind == powLen)
                                t = 0;

                            if (t > 0)
                            {
                                for (j = 1; j <= t + 2; j++)
                                    res = res * res % mod;
                                res = res * table2[t] % mod;
                                i = i + t + 1;
                            }
                            else
                            {
                                res = res * res % mod;
                                res = res * table2[0] % mod;
                            }
                        }
                        else
                        {
                            t = 1; // кількість одиниць
                            ind = i + t;
                            while (t < w && ind < powLen && pow_bin[ind] == '1')
                            {
                                t++;
                                ind++;
                            }

                            for (j = 1; j <= t; j++)
                                res = res * res % mod;
                            res = res * table1[t - 1] % mod;
                            i = i + t - 1;
                        }
                    }
                    else
                    {
                        res = res * res % mod;
                        i++;
                    }

                }
            }
            return res;
        }

        // ця функція відрізняється від попередньої лише рядком int[] Add = Add_Chain_only_prime[prime];
        // у попередній функції Add_Chain, а тут Add_Chain_only_prime, можливо їх реалізувати в одній функції та передавати параметр?
        public static BigInteger Sliding_Prime(BigInteger found, BigInteger pow, BigInteger mod, int w, out double table_time, bool state)
        {
            bool mont = AdditionalParameters.montFlag;
            Stopwatch stw = new Stopwatch();
            found = found % mod;

            int prime = list_prime[w];
            int length_w = ConvToBinary(prime).Length;
            Dictionary<string, BigInteger> table = new Dictionary<string, BigInteger>();
            int dif, i, j;

            int[] Add = state ? Add_Chain[prime] : Add_Chain_only_prime[prime];

            string subs;
            BigInteger res = 1;
            string pow_bin = ConvToBinary(pow);
            int pow_length = pow_bin.Length;

            if (mont)
            {
                MyList<BigInteger> parameters = toMontgomeryDomain(ref found, ref res, mod);

                stw.Start();

                table.Add("1", found);
                table.Add("10", MontgomeryMultDomain(found, found, mod, parameters));

                for (i = 1; i < Add.Length; i++)
                {
                    dif = Add[i] - Add[i - 1];
                    table.Add(ConvToBinary(Add[i]),
                        MontgomeryMultDomain(table[conv_numbers[Add[i - 1]]], table[conv_numbers[dif]], mod, parameters));
                }
                stw.Stop();
                table_time = stw.Elapsed.TotalMilliseconds;

                i = 0;

                while (i < pow_length)
                {
                    j = length_w;
                    if (pow_bin[i] == '1')
                    {
                        /*
                        while (i + j <= pow_length && pow_bin[i + j - 1] == '0' && j > 1)
                            j = j - 1;*/

                        while (i + j > pow_length)
                            j = j - 1;

                        subs = pow_bin.Substring(i, j);
                        while (j > 2 && !table.ContainsKey(subs))
                        {
                            j = j - 1;
                            subs = pow_bin.Substring(i, j);
                        }

                        /*
                        if (j > 1 && i + j <= pow_length)
                            subs = pow_bin.Substring(i, j);
                        else
                            subs = "";*/

                        if (table.ContainsKey(subs))
                        {
                            for (int k = 0; k < j; k++)
                                res = MontgomeryMultDomain(res, res, mod, parameters);

                            res = MontgomeryMultDomain(res, table[subs], mod, parameters);
                            i = i + j;
                        }
                        else
                        {
                            res = MontgomeryMultDomain(res, res, mod, parameters);
                            res = MontgomeryMultDomain(res, found, mod, parameters);
                            i++;
                        }
                    }
                    else
                    {
                        res = MontgomeryMultDomain(res, res, mod, parameters);
                        i++;
                    }
                }

                res = outMontgomeryDomain(res, mod, parameters);
            }
            else
            {
                stw.Start();

                table.Add("1", found);
                table.Add("10", found * found % mod);

                for (i = 1; i < Add.Length; i++)
                {
                    dif = Add[i] - Add[i - 1];
                    table.Add(ConvToBinary(Add[i]),
                        table[conv_numbers[Add[i - 1]]] * table[conv_numbers[dif]] % mod);
                }
                stw.Stop();
                table_time = stw.Elapsed.TotalMilliseconds;

                i = 0;
                while (i < pow_length)
                {
                    j = length_w;
                    if (pow_bin[i] == '1')
                    {
                        /*
                        while (i + j <= pow_length && pow_bin[i + j - 1] == '0' && j > 1)
                            j = j - 1;*/

                        while (i + j > pow_length)
                            j = j - 1;

                        subs = pow_bin.Substring(i, j);
                        while (j > 2 && !table.ContainsKey(subs))
                        {
                            j = j - 1;
                            subs = pow_bin.Substring(i, j);
                        }

                        /*
                        if (j > 1 && i + j <= pow_length)
                            subs = pow_bin.Substring(i, j);
                        else
                            subs = "";*/

                        if (table.ContainsKey(subs))
                        {
                            for (int k = 0; k < j; k++)
                                res = res * res % mod;

                            res = res * table[subs] % mod;
                            i = i + j;
                        }
                        else
                        {
                            res = res * res % mod;
                            res = res * found % mod;
                            i++;
                        }
                    }
                    else
                    {
                        res = res * res % mod;
                        i++;
                    }
                }
            }

            return res;
        }

        public static BigInteger Adaptive(BigInteger found, BigInteger pow, BigInteger mod, int w, out double table_time)
        {
            bool mont = AdditionalParameters.montFlag;
            Stopwatch stw = new Stopwatch();
            found = found % mod;

            BigInteger res = 1;
            BigInteger temp_value;
            int temp_size = (1 << w) - 1;

            Dictionary<string, BigInteger> table = new Dictionary<string, BigInteger>();
            string pow_bin = ConvToBinary(pow);
            string str_null = "";
            string temp = ConvToBinary(1);
            string subs;

            string subs_first;
            int w_max = w, sum_w = w;
            int w_slide;
            int w_first, w_second;
            int limit = 2*w;

            //found = found % mod;

            if (mont)
            {
                MyList<BigInteger> parameters = toMontgomeryDomain(ref found, ref res, mod);

                stw.Start();

                while (temp.Length != w)
                    temp = "0" + temp;

                table.Add(temp, found);
                temp_value = found;

                for (int i = 2; i <= temp_size; i++)
                {
                    temp = ConvToBinary(i);
                    while (temp.Length != w)
                        temp = "0" + temp;
                    temp_value = MontgomeryMultDomain(temp_value, found, mod, parameters);
                    table.Add(temp, temp_value);
                }

                stw.Stop();
                table_time = stw.Elapsed.TotalMilliseconds;

                while (pow_bin.Length % w != 0)
                    pow_bin = "0" + pow_bin;

                for (int i = 0; i < w; i++)
                    str_null = "0" + str_null;

                for (int i = 0; i < pow_bin.Length;)
                {
                    w_slide = limit; //w_max;
                    while (i + w_slide > pow_bin.Length)
                        w_slide = w_slide - w;

                    subs = pow_bin.Substring(i, w_slide);

                    while (!table.ContainsKey(subs) && w_slide != 0)
                    {
                        w_slide = w_slide - w;
                        subs = pow_bin.Substring(i, w_slide);
                    }
                    subs_first = subs;

                    w_first = w_slide;
                    if (w_first != 0 /*&& w_first < limit*/)
                    {
                        w_slide = limit - w_first; //w_max;
                        while (i + w_first + w_slide > pow_bin.Length)
                            w_slide = w_slide - w;

                        subs = pow_bin.Substring(i + w_first, w_slide);
                        while (!table.ContainsKey(subs) && w_slide != 0)
                        {
                            w_slide = w_slide - w;
                            subs = pow_bin.Substring(i + w_first, w_slide);
                        }
                        w_second = w_slide;

                        if (w_slide != 0)
                        {
                            sum_w = w_first + w_second;
                            if (sum_w > w_max)
                                w_max = sum_w;

                            string subs_temp = subs_first;
                            for (int k = 0; k < w_second; k++)
                                subs_temp = subs_temp + "0";

                            if (!table.ContainsKey(subs_temp))
                            {
                                temp_value = table[subs_first];
                                for (int k = 0; k < w_second; k++)
                                    temp_value = MontgomeryMultDomain(temp_value, temp_value, mod, parameters);
                                table.Add(subs_temp, temp_value);
                                table.Add(subs_first + subs, MontgomeryMultDomain(temp_value, table[subs], mod, parameters));
                            }
                            else
                                table.Add(subs_first + subs, MontgomeryMultDomain(table[subs_temp], table[subs], mod, parameters));
                        }
                        else
                            sum_w = w_first;
                    }
                    else
                        sum_w = w;

                    for (int k = 0; k < sum_w; k++)
                        res = MontgomeryMultDomain(res, res, mod, parameters);

                    if (w_first != 0)
                        res = MontgomeryMultDomain(res, table[subs_first + subs], mod, parameters);

                    i = i + sum_w;
                }

                res = outMontgomeryDomain(res, mod, parameters);
            }
            else
            {
                stw.Start();

                while (temp.Length != w)
                    temp = "0" + temp;

                table.Add(temp, found);
                temp_value = found;

                for (int i = 2; i <= temp_size; i++)
                {
                    temp = ConvToBinary(i);
                    while (temp.Length != w)
                        temp = "0" + temp;
                    temp_value = temp_value * found % mod;
                    table.Add(temp, temp_value);
                }

                stw.Stop();
                table_time = stw.Elapsed.TotalMilliseconds;

                while (pow_bin.Length % w != 0)
                    pow_bin = "0" + pow_bin;

                for (int i = 0; i < w; i++)
                    str_null = "0" + str_null;

                for (int i = 0; i < pow_bin.Length;)
                {
                    w_slide = limit; //w_max;
                    while (i + w_slide > pow_bin.Length)
                        w_slide = w_slide - w;

                    subs = pow_bin.Substring(i, w_slide);

                    while (!table.ContainsKey(subs) && w_slide != 0)
                    {
                        w_slide = w_slide - w;
                        subs = pow_bin.Substring(i, w_slide);
                    }
                    subs_first = subs;

                    w_first = w_slide;
                    if (w_first != 0 /*&& w_first < limit*/)
                    {
                        w_slide = limit - w_first; //w_max;
                        while (i + w_first + w_slide > pow_bin.Length)
                            w_slide = w_slide - w;

                        subs = pow_bin.Substring(i + w_first, w_slide);
                        while (!table.ContainsKey(subs) && w_slide != 0)
                        {
                            w_slide = w_slide - w;
                            subs = pow_bin.Substring(i + w_first, w_slide);
                        }
                        w_second = w_slide;

                        if (w_slide != 0)
                        {
                            sum_w = w_first + w_second;
                            if (sum_w > w_max)
                                w_max = sum_w;

                            string subs_temp = subs_first;
                            for (int k = 0; k < w_second; k++)
                                subs_temp = subs_temp + "0";

                            if (!table.ContainsKey(subs_temp))
                            {
                                temp_value = table[subs_first];
                                for (int k = 0; k < w_second; k++)
                                    temp_value = temp_value * temp_value % mod;
                                table.Add(subs_temp, temp_value);
                                table.Add(subs_first + subs, temp_value * table[subs] % mod);
                            }
                            else
                                table.Add(subs_first + subs, table[subs_temp] * table[subs] % mod);
                        }
                        else
                            sum_w = w_first;
                    }
                    else
                        sum_w = w;

                    for (int k = 0; k < sum_w; k++)
                        res = res * res % mod;

                    if (w_first != 0)
                        res = res * table[subs_first + subs] % mod;

                    i = i + sum_w;
                }
            }
            return res;
        }

        public static BigInteger Bonus(BigInteger found, BigInteger po, BigInteger mod, int w, out double table_time)
        {
            found = found % mod;
            BigInteger res = found;//change found
            Stopwatch stw = new Stopwatch();
            stw.Start();


            stw.Stop();
            table_time = stw.Elapsed.TotalMilliseconds;

            return res;
        }

        public static BigInteger SlidingRL(BigInteger found, BigInteger pow, BigInteger mod, int w, out double table_time)
        {

            // 5.1
            bool mont = AdditionalParameters.montFlag;
            found = found % mod;

            int i;
            int count_elem = 1 << (w - 1);
            MyList<BigInteger> table = new MyList<BigInteger>();

            BigInteger a = found;
            BigInteger res = 1;

            string pow_bin = ConvToBinary(pow);
            int pow_length = pow_bin.Length;


            int j, index;
            Stopwatch stw = new Stopwatch();

            if (mont)
            {
                MyList <BigInteger> parameters = MontgomeryMethods.toMontgomeryDomain(ref a, ref res, mod);

                stw.Start();
                for (i = 1; i <= count_elem; i++)
                    table.Add(res);
                stw.Stop();

                i = pow_length - 1;
                while (i >= 0)
                {
                    j = w;
                    if (pow_bin[i] == '1')
                    {
                        while (i - j + 1 < 0)
                            j--;

                        while (pow_bin[i - j + 1] == '0' && j > 1)
                            j--;

                        i = i - j;

                        string subs = pow_bin.Substring(i + 1, j);
                        index = (Convert.ToInt32(subs, 2) - 1) / 2;

                        if (index >= 0)
                            table[index] = MontgomeryMultDomain(table[index], a, mod, parameters);

                        for (int k = 0; k < j; k++)
                            a = MontgomeryMultDomain(a, a, mod, parameters);
                    }
                    else
                    {
                        a = MontgomeryMultDomain(a, a, mod, parameters);
                        i--;
                    }
                }


                stw.Start();
                BigInteger temp;
                for (i = count_elem - 1; i > 0; i--)
                {
                    table[i - 1] = MontgomeryMultDomain(table[i - 1], table[i], mod, parameters);
                    temp = MontgomeryMultDomain(table[i], table[i], mod, parameters);
                    table[0] = MontgomeryMultDomain(table[0], temp, mod, parameters);
                }
                stw.Stop();
                table_time = stw.Elapsed.TotalMilliseconds;

                res = outMontgomeryDomain(table[0], mod, parameters);
                return res;
            }
            else
            {
                stw.Start();
                for (i = 1; i <= count_elem; i++)
                    table.Add(1);
                stw.Stop();

                i = pow_length - 1;
                while (i >= 0)
                {
                    j = w;
                    if (pow_bin[i] == '1')
                    {
                        while (i - j + 1 < 0)
                            j--;

                        while (pow_bin[i - j + 1] == '0' && j > 1)
                            j--;

                        i = i - j;
                        string subs = pow_bin.Substring(i + 1, j);
                        index = (Convert.ToInt32(subs, 2) - 1) / 2;
                        if (index >= 0)
                            table[index] = table[index] * a % mod;

                        for (int k = 0; k < j; k++)
                            a = a * a % mod;
                    }
                    else
                    {
                        a = a * a % mod;
                        i--;
                    }
                }

                stw.Start();
                BigInteger temp;
                for (i = count_elem - 1; i > 0; i--)
                {
                    table[i - 1] = table[i - 1] * table[i] % mod;
                    temp = table[i] * table[i] % mod;
                    table[0] = table[0] * temp % mod;
                }
                stw.Stop();
                table_time = stw.Elapsed.TotalMilliseconds;

                return table[0];
            }
            /*

            // залишити закоментованим
            Stopwatch stw = new Stopwatch();
            found = found % mod;
            stw.Start();
            BigInteger power = 1 << (w - 1);
            var table = SlidingRLTable(found, mod, power, w);

            stw.Stop();
            table_time = stw.Elapsed.TotalMilliseconds;

            BigInteger res = 1;
            BigInteger temp = found;

            string binary = bif.ToBin(pow);

            while (binary.Length > 0)
            {
                int index = binary.Length - 1;
                if (binary.Length < w || binary[index - w + 1] == '0')
                {
                    if (binary[index] == '1')
                        res = mul(res, temp, mod);

                    for (int j = 0; j < table.Count; j++)
                        table[j] = mul(table[j], table[j], mod);

                    temp = mul(temp, temp, mod);

                    binary = binary.Remove(index, 1);
                }
                else
                {
                    int c = Convert.ToInt32(binary.Substring(index - w + 1, w), 2);
                    res = mul(res, table[c - power], mod);

                    temp = mul(temp, table[table.Count - 1], mod);

                    for (int k = 0; k < w; k++)
                        for (int j = 0; j < table.Count; j++)
                            table[j] = mul(table[j], table[j], mod);

                    binary = binary.Remove(index - w + 1, w);
                }
            }
            return res;
            */
        }
        
        public static BigInteger SlidingRL_Dic(BigInteger found, BigInteger pow, BigInteger mod, int w, out double table_time)
        {

            // 5.2. Dic
            found = found % mod;
            bool mont = AdditionalParameters.montFlag;

            int i;
            int count_elem = 1 << (w - 1);
            Dictionary<string, BigInteger> table = new Dictionary<string, BigInteger>();
            string temp;

            BigInteger a = found;
            BigInteger res = 1;
            int count_temp = (count_elem << 1) - 1;

            string pow_bin = ConvToBinary(pow);
            int pow_length = pow_bin.Length;

            int j;

            Stopwatch stw = new Stopwatch();

            if (mont)
            {
                MyList<BigInteger> parameters = toMontgomeryDomain(ref a, ref res, mod);

                stw.Start();
                for (i = 1; i <= count_temp; i = i + 2)
                {
                    temp = ConvToBinary(i);
                    table.Add(temp, res);
                }
                stw.Stop();

                i = pow_length - 1;
                while (i >= 0)
                {
                    j = w;
                    if (pow_bin[i] == '1')
                    {
                        while (i - j + 1 < 0)
                            j--;

                        while (pow_bin[i - j + 1] == '0' && j > 1)
                            j--;

                        i = i - j;

                        string subs = pow_bin.Substring(i + 1, j);
                        table[subs] = MontgomeryMultDomain(table[subs], a, mod, parameters);

                        for (int k = 0; k < j; k++)
                            a = MontgomeryMultDomain(a, a, mod, parameters);
                    }
                    else
                    {
                        a = MontgomeryMultDomain(a, a, mod, parameters);
                        i--;
                    }
                }

                stw.Start();
                string temp_previous;
                string str_one = "1";
                BigInteger sqr;
                for (i = count_temp; i > 1; i = i - 2)
                {
                    temp = ConvToBinary(i);
                    temp_previous = ConvToBinary(i - 2);
                    table[temp_previous] = MontgomeryMultDomain(table[temp_previous], table[temp], mod, parameters);
                    sqr = MontgomeryMultDomain(table[temp], table[temp], mod, parameters);
                    table[str_one] = MontgomeryMultDomain(table[str_one], sqr, mod, parameters);
                }
                stw.Stop();
                table_time = stw.Elapsed.TotalMilliseconds;

                res = outMontgomeryDomain(table[str_one], mod, parameters);
                return res;
            }
            else
            {
                stw.Start();
                for (i = 1; i <= count_temp; i = i + 2)
                {
                    temp = ConvToBinary(i);
                    table.Add(temp, 1);
                }
                stw.Stop();

                i = pow_length - 1;
                while (i >= 0)
                {
                    j = w;
                    if (pow_bin[i] == '1')
                    {
                        while (i - j + 1 < 0)
                            j--;

                        while (pow_bin[i - j + 1] == '0' && j > 1)
                            j--;

                        i = i - j;
                        string subs = pow_bin.Substring(i + 1, j);
                        table[subs] = table[subs] * a % mod;

                        for (int k = 0; k < j; k++)
                            a = a * a % mod;
                    }
                    else
                    {
                        a = a * a % mod;
                        i--;
                    }
                }

                stw.Start();
                string temp_previous;
                string str_one = "1";
                BigInteger sqr;
                for (i = count_temp; i > 1; i = i - 2)
                {
                    temp = ConvToBinary(i);
                    temp_previous = ConvToBinary(i - 2);
                    table[temp_previous] = table[temp_previous] * table[temp] % mod;
                    sqr = table[temp] * table[temp] % mod;
                    table[str_one] = table[str_one] * sqr % mod;
                }
                stw.Stop();
                table_time = stw.Elapsed.TotalMilliseconds;

                return table[str_one];
            }

        }

        public static BigInteger SlidingLR(BigInteger found, BigInteger pow, BigInteger mod, int w, out double table_time)
        {
            Stopwatch stw = new Stopwatch();
            bool mont = AdditionalParameters.montFlag;
            found = found % mod;
            int i;

            BigInteger res = 1;
            string pow_bin = ConvToBinary(pow);

            int j, index;
            int pow_length = pow_bin.Length;

            if (mont)
            {
                MyList<BigInteger> parameters = toMontgomeryDomain(ref found, ref res, mod);
                stw.Start();

                MyList<BigInteger> table = new MyList<BigInteger>(); ;
                string temp;
                int temp_size = (1 << w) - 1;
                BigInteger temp_value = found;
                BigInteger sqr_found = MontgomeryMultDomain(found, found, mod, parameters);

                for (i = 3; i <= temp_size; i = i + 2)
                {
                    temp = ConvToBinary(i);
                    temp_value = MontgomeryMultDomain(temp_value, sqr_found, mod, parameters);
                    table.Add(temp_value);
                }

                stw.Stop();

                table_time = stw.Elapsed.TotalMilliseconds;

                i = 0;

                while (i < pow_length)
                {
                    j = w;
                    if (pow_bin[i] == '1')
                    {
                        while (i + j <= pow_length && pow_bin[i + j - 1] == '0' && j > 1)
                            j--;

                        if (j > 1 && i + j <= pow_length)
                        {
                            for (int k = 0; k < j; k++)
                                res = MontgomeryMultDomain(res, res, mod, parameters);

                            string subs = pow_bin.Substring(i, j);
                            index = (Convert.ToInt32(subs, 2) - 1) / 2 - 1;
                            res = MontgomeryMultDomain(res, table[index], mod, parameters);
                            i = i + j;
                        }
                        else
                        {
                            res = MontgomeryMultDomain(res, res, mod, parameters);
                            res = MontgomeryMultDomain(res, found, mod, parameters);
                            i++;
                        }
                    }
                    else
                    {
                        res = MontgomeryMultDomain(res, res, mod, parameters);
                        i++;
                    }
                }

                res = outMontgomeryDomain(res, mod, parameters);
            }
            else
            {
                stw.Start();

                MyList<BigInteger> table = new MyList<BigInteger>(); ;
                string temp;
                int temp_size = (1 << w) - 1;
                BigInteger temp_value = found;
                BigInteger sqr_found = found * found % mod;

                for (i = 3; i <= temp_size; i = i + 2)
                {
                    temp = ConvToBinary(i);
                    temp_value = temp_value * sqr_found % mod;
                    table.Add(temp_value);
                }

                stw.Stop();

                table_time = stw.Elapsed.TotalMilliseconds;

                i = 0;

                while (i < pow_length)
                {
                    j = w;
                    if (pow_bin[i] == '1')
                    {
                        while (i + j <= pow_length && pow_bin[i + j - 1] == '0' && j > 1)
                            j--;

                        if (j > 1 && i + j <= pow_length)
                        {
                            for (int k = 0; k < j; k++)
                                res = res * res % mod;

                            string subs = pow_bin.Substring(i, j);
                            index = (Convert.ToInt32(subs, 2) - 1) / 2 - 1;
                            res = res * table[index] % mod;
                            i = i + j;
                        }
                        else
                        {
                            res = res * res % mod;
                            res = res * found % mod;
                            i++;
                        }
                    }
                    else
                    {
                        res = res * res % mod;
                        i++;
                    }
                }
            }

            return res;

        }

        public static BigInteger SlidingLR_Dic(BigInteger found, BigInteger pow, BigInteger mod, int w, out double table_time)
        {
            Stopwatch stw = new Stopwatch();
            found = found % mod;
            bool mont = AdditionalParameters.montFlag;

            int i;
            BigInteger res = 1;
            string pow_bin = ConvToBinary(pow);
            int j;
            int pow_length = pow_bin.Length;

            if (mont)
            {
                MyList<BigInteger> parameters = toMontgomeryDomain(ref found, ref res, mod);

                stw.Start();

                Dictionary<string, BigInteger> table = new Dictionary<string, BigInteger>();
                string temp;
                int temp_size = (1 << w) - 1;
                BigInteger temp_value = found;
                BigInteger sqr_found = MontgomeryMultDomain(found, found, mod, parameters);

                for (i = 3; i <= temp_size; i = i + 2)
                {
                    temp = ConvToBinary(i);
                    temp_value = MontgomeryMultDomain(temp_value, sqr_found, mod, parameters);
                    table.Add(temp, temp_value);
                }

                stw.Stop();

                table_time = stw.Elapsed.TotalMilliseconds;

                i = 0;

                while (i < pow_length)
                {
                    j = w;
                    if (pow_bin[i] == '1')
                    {
                        while (i + j <= pow_length && pow_bin[i + j - 1] == '0' && j > 1)
                            j = j - 1;
                        if (j > 1 && i + j <= pow_length)
                        {
                            for (int k = 0; k < j; k++)
                                res = MontgomeryMultDomain(res, res, mod, parameters);

                            string subs = pow_bin.Substring(i, j);
                            res = MontgomeryMultDomain(res, table[subs], mod, parameters);
                            i = i + j;
                        }
                        else
                        {
                            res = MontgomeryMultDomain(res, res, mod, parameters);
                            res = MontgomeryMultDomain(res, found, mod, parameters);
                            i++;
                        }
                    }
                    else
                    {
                        res = MontgomeryMultDomain(res, res, mod, parameters);
                        i++ ;
                    }
                }

                res = outMontgomeryDomain(res, mod, parameters);
            }
            else
            {
                stw.Start();

                Dictionary<string, BigInteger> table = new Dictionary<string, BigInteger>();
                string temp;
                int temp_size = (1 << w) - 1;
                BigInteger sqr_found = found * found % mod;
                BigInteger temp_value = found;

                for (i = 3; i <= temp_size; i = i + 2)
                {
                    temp = ConvToBinary(i);
                    temp_value = temp_value * sqr_found % mod;
                    table.Add(temp, temp_value);
                }

                stw.Stop();

                table_time = stw.Elapsed.TotalMilliseconds;

                i = 0;

                while (i < pow_length)
                {
                    j = w;
                    if (pow_bin[i] == '1')
                    {
                        while (i + j <= pow_length && pow_bin[i + j - 1] == '0' && j > 1)
                            j = j - 1;
                        if (j > 1 && i + j <= pow_length)
                        {
                            for (int k = 0; k < j; k++)
                                res = res * res % mod;

                            string subs = pow_bin.Substring(i, j);
                            res = res * table[subs] % mod;
                            i = i + j;
                        }
                        else
                        {
                            res = res * res % mod;
                            res = res * found % mod;
                            i++;
                        }
                    }
                    else
                    {
                        res = res * res % mod;
                        i++ ;
                    }
                }
            }

            return res;
        }

        /*public static BigInteger SlidingLR(BigInteger found, BigInteger power, BigInteger mod, int w, out double table_time)
        {
            Stopwatch stw = new Stopwatch();
            found = found % mod;
            stw.Start();
            BigInteger pow = 2 * ((1 << w) - (BigInteger)Pow((-1), w)) / 3 - 1;
            var table = NAFLRTable(found, mod, pow, w);
            stw.Stop();

            table_time = stw.Elapsed.TotalMilliseconds;
            MyList<BigInteger> x = power.ToNAF();

            BigInteger res = 1;
            for (BigInteger i = x.Count - 1; i > -1;)
            {
                var max = new MyList<BigInteger>();
                if (x[i] == 0)
                {
                    max.Add(0);
                    max.Add(1);
                }
                else
                    max = FindLargest2(x, i, w);

                for (int d = 0; d < max[1]; d++)
                    res = mul(res, res, mod);

                if (max[0] > 0)
                    res = mul(res, table[(bif.Abs(max[0]) / 2)], mod);
                else if (max[0] < 0)
                    res = mul(res, Euclid_2_1(mod, table[(bif.Abs(max[0]) / 2)]), mod);

                i = i - max[1];
            }
            return res;
        }*/

        public static BigInteger NAFSlidingRL(BigInteger found, BigInteger power, BigInteger mod, int w, out double table_time)
        {
            bool mont = AdditionalParameters.montFlag;
            Stopwatch stw = new Stopwatch();

            BigInteger res = 1;
            MyList<int> x = ToNAF(power);

            found = found % mod;

            int sign;
            if (w % 2 == 1)
                sign = -1;
            else
                sign = 1;

            int last_table_element = (((1 << w) - sign) << 1) / 3 - 1;

            MyList<BigInteger> table = new MyList<BigInteger>();
            MyList<BigInteger> table_inv = new MyList<BigInteger>();

            int temp;
            BigInteger a = found;

            if (mont)
            {
                MyList <BigInteger> parameters = MontgomeryMethods.toMontgomeryDomain(ref a, ref res, mod);

                stw.Start();
                table.Add(res);
                table_inv.Add(res);

                for (int i = 3; i <= last_table_element; i += 2)
                {
                    table.Add(res);
                    table_inv.Add(res);
                }
                stw.Stop();

                for (int i = 0; i < x.Count;)
                {
                    List<int> max = new List<int>();
                    if (x[i] == 0)
                    {
                        max.Add(0);
                        max.Add(1);
                    }
                    else
                        max = FindLargest1(x, i, w);

                    if (max[0] > 0)
                    {
                        temp = max[0] >> 1;
                        table[temp] = MontgomeryMultDomain(table[temp], a, mod, parameters);
                    }
                    else if (max[0] < 0)
                    {
                        temp = (-max[0]) >> 1;
                        table_inv[temp] = MontgomeryMultDomain(table_inv[temp], a, mod, parameters);
                    }

                    for (int d = 0; d < max[1]; d++)
                        a = MontgomeryMultDomain(a, a, mod, parameters);

                    i = i + max[1];
                }

                int count_elem = table.Count;
                BigInteger temp_val;

                stw.Start();
                for (int i = count_elem - 1; i > 0; i--)
                {
                    table[i - 1] = MontgomeryMultDomain(table[i - 1], table[i], mod, parameters);
                    temp_val = MontgomeryMultDomain(table[i], table[i], mod, parameters);
                    table[0] = MontgomeryMultDomain(table[0], temp_val, mod, parameters);

                    table_inv[i - 1] = MontgomeryMultDomain(table_inv[i - 1], table_inv[i], mod, parameters);
                    temp_val = MontgomeryMultDomain(table_inv[i], table_inv[i], mod, parameters);
                    table_inv[0] = MontgomeryMultDomain(table_inv[0], temp_val, mod, parameters);
                }
                stw.Stop();
                table_time = stw.Elapsed.TotalMilliseconds;

                res = MontgomeryMultDomain(table[0], MontgomeryInverse(mod, table_inv[0], parameters), mod, parameters);
                res = outMontgomeryDomain(res, mod, parameters);

                return res;
            }
            else
            {
                stw.Start();
                table.Add(1);
                table_inv.Add(1);

                for (int i = 3; i <= last_table_element; i += 2)
                {
                    table.Add(1);
                    table_inv.Add(1);
                }
                stw.Stop();

                for (int i = 0; i < x.Count;)
                {
                    List<int> max = new List<int>();
                    if (x[i] == 0)
                    {
                        max.Add(0);
                        max.Add(1);
                    }
                    else
                        max = FindLargest1(x, i, w);

                    if (max[0] > 0)
                    {
                        temp = max[0] >> 1;
                        table[temp] = table[temp] * a % mod;
                    }
                    else if (max[0] < 0)
                    {
                        temp = (-max[0]) >> 1;
                        table_inv[temp] = table_inv[temp] * a % mod;
                    }

                    for (int d = 0; d < max[1]; d++)
                        a = a * a % mod;

                    i = i + max[1];
                }


                int count_elem = table.Count;
                BigInteger temp_val;

                stw.Start();
                for (int i = count_elem - 1; i > 0; i--)
                {
                    table[i - 1] = table[i - 1] * table[i] % mod;
                    temp_val = table[i] * table[i] % mod;
                    table[0] = table[0] * temp_val % mod;

                    table_inv[i - 1] = table_inv[i - 1] * table_inv[i] % mod;
                    temp_val = table_inv[i] * table_inv[i] % mod;
                    table_inv[0] = table_inv[0] * temp_val % mod;
                }
                stw.Stop();
                table_time = stw.Elapsed.TotalMilliseconds;

                return table[0] * Euclid_2_1(mod, table_inv[0]) % mod;
            }


            /*
            BigInteger res = 1;
            MyList<int> x = power.ToNAF();

            Stopwatch stw = new Stopwatch();
            found = found % mod;
            stw.Start();

            int sign;
            if (w % 2 == 1)
                sign = -1;
            else
                sign = 1;

            int last_table_element = (((1 << w) - sign) << 1) / 3 - 1;

            MyList<BigInteger> table = new MyList<BigInteger>();
            MyList<BigInteger> table_inv = new MyList<BigInteger>();

            table.Add(found);
            table_inv.Add(Euclid_2_1(mod, found));

            BigInteger sqr_found = found * found % mod;

            for (int i = 3; i <= last_table_element; i += 2)
            {
                table.Add(table[(i >> 1) - 1] * sqr_found % mod);
                table_inv.Add(Euclid_2_1(mod, table[i >> 1]));
            }

            stw.Stop();
            table_time = stw.Elapsed.TotalMilliseconds;


            for (int i = 0; i < x.Count;)
            {
                List<int> max = new List<int>();
                if (x[i] == 0)
                {
                    max.Add(0);
                    max.Add(1);
                }
                else
                    max = FindLargest1(x, i, w);

                if (max[0] > 0)
                    res = res * table[max[0] >> 1] % mod;
                else if (max[0] < 0)
                    res = res * table_inv[(-max[0]) >> 1] % mod;

                for (int d = 0; d < max[1]; d++)
                    for (int j = 0; j < table.Count; j++)
                    {
                        table[j] = table[j] * table[j] % mod;
                        table_inv[j] = table_inv[j] * table_inv[j] % mod;
                    }

                i = i + max[1];
            }


            return res;
            */


            /*
            BigInteger res = 1;
            MyList<int> x = power.ToNAF();

            Stopwatch stw = new Stopwatch();
            found = found % mod;
            stw.Start();

            BigInteger pow = 2 * ((1 << w) - (int)Pow((-1), w)) / 3 - 1;
            MyList<BigInteger> table = NAFRLTable(found, mod, pow, w);

            stw.Stop();
            table_time = stw.Elapsed.TotalMilliseconds;

            for (int i = 0; i < x.Count;)
            {
                List<int> max = FindLargest1(x, i, w);

                if (max[0] > 0)
                    res = mul(res, table[(bif.Abs(max[0]) / 2)], mod);
                else if (max[0] < 0)
                    res = mul(res, Euclid_2_1(mod, table[(bif.Abs(max[0]) / 2)]), mod);

                for (int d = 0; d < max[1]; d++)
                    for (int j = 0; j < table.Count; j++)
                        table[j] = mul(table[j], table[j], mod);

                i = i + max[1];
            }
            return res;
            */
        }

        public static BigInteger NAFSlidingLR(BigInteger found, BigInteger power, BigInteger mod, int w, out double table_time)
        {
            bool mont = AdditionalParameters.montFlag;

            BigInteger res = 1;
            MyList<int> x = ToNAF(power);

            found = found % mod;

            MyList<BigInteger> table = new MyList<BigInteger>();
            MyList<BigInteger> table_inv = new MyList<BigInteger>();
            Stopwatch stw = new Stopwatch();

            if (mont)
            {
                MyList <BigInteger> parameters = MontgomeryMethods.toMontgomeryDomain(ref found, ref res, mod);

                stw.Start();

                int sign;
                if (w % 2 == 1)
                    sign = -1;
                else
                    sign = 1;

                int last_table_element = (((1 << w) - sign) << 1) / 3 - 1;

                table.Add(found);
                table_inv.Add(MontgomeryInverse(mod, found, parameters));

                BigInteger sqr_found = MontgomeryMultDomain(found, found, mod, parameters);

                for (int i = 3; i <= last_table_element; i += 2)
                {
                    table.Add(MontgomeryMultDomain(table[(i >> 1) - 1], sqr_found, mod, parameters));
                    table_inv.Add(MontgomeryInverse(mod, table[i >> 1], parameters));
                }

                stw.Stop();
                table_time = stw.Elapsed.TotalMilliseconds;

                for (int i = x.Count; i > 0;)
                {
                    List<int> max = new List<int>();
                    if (x[i - 1] == 0 || i == 1)
                    {
                        max.Add(x[i - 1]);
                        max.Add(1);
                    }
                    else
                        max = FindLargest2(x, i - 1, w);

                    for (int d = 0; d < max[1]; d++)
                        res = MontgomeryMultDomain(res, res, mod, parameters);

                    if (max[0] > 0)
                        res = MontgomeryMultDomain(res, table[max[0] >> 1], mod, parameters);
                    else if (max[0] < 0)
                        res = MontgomeryMultDomain(res, table_inv[(-max[0]) >> 1], mod, parameters);

                    i = i - (int) max[1];
                }

                res = outMontgomeryDomain(res, mod, parameters);
            }
            else
            {
                stw.Start();

                int sign;
                if (w % 2 == 1)
                    sign = -1;
                else
                    sign = 1;

                int last_table_element = (((1 << w) - sign) << 1) / 3 - 1;

                table.Add(found);
                table_inv.Add(Euclid_2_1(mod, found));

                BigInteger sqr_found = found * found % mod;

                for (int i = 3; i <= last_table_element; i += 2)
                {
                    table.Add(table[(i >> 1) - 1] * sqr_found % mod);
                    table_inv.Add(Euclid_2_1(mod, table[i >> 1]));
                }

                stw.Stop();
                table_time = stw.Elapsed.TotalMilliseconds;

                for (int i = x.Count; i > 0;)
                {
                    List<int> max = new List<int>();
                    if (x[i - 1] == 0 || i == 1)
                    {
                        max.Add(x[i - 1]);
                        max.Add(1);
                    }
                    else
                        max = FindLargest2(x, i - 1, w);

                    for (int d = 0; d < max[1]; d++)
                        res = res * res % mod;

                    if (max[0] > 0)
                        res = res * table[max[0] >> 1] % mod;
                    else if (max[0] < 0)
                        res = res * table_inv[(-max[0]) >> 1] % mod;

                    i = i - (int) max[1];
                }
            }

            return res;

            /*
                     BigInteger res = 1;
                     MyList<BigInteger> x = power.ToNAF();

                     Stopwatch stw = new Stopwatch();
                     found = found % mod;
                     stw.Start();

                     BigInteger pow = 2 * ((int)Pow(2, w) - (int)Pow((-1), w)) / 3 - 1;
                     MyList<BigInteger> table = NAFLRTable(found, mod, pow, w);

                     stw.Stop();
                     table_time = stw.Elapsed.TotalMilliseconds;

                     for (int i = x.Count - 1; i > -1;)
                     {
                         List<BigInteger> max = new List<BigInteger>();
                         if (x[i] == 0)
                         {
                             max.Add(0);
                             max.Add(1);
                         }
                         else
                             max = FindLargest2(x, i, w);

                         for (int d = 0; d < max[1]; d++)
                             res = mul(res, res, mod);

                         if (max[0] > 0)
                             res = mul(res, table[(bif.Abs(max[0]) / 2)], mod);
                         else if (max[0] < 0)
                             res = mul(res, Euclid_2_1(mod, table[(bif.Abs(max[0]) / 2)]), mod);

                         i = i - (int)max[1];
                     }
                     return res;
             */

        }

        public static BigInteger NAFWindowRL(BigInteger found, BigInteger power, BigInteger mod, int w, out double table_time)
        {
            bool mont = AdditionalParameters.montFlag;
            BigInteger res = 1;
            MyList<int> x = ToWNAF(power, w);
            MyList<BigInteger> table = new MyList<BigInteger>();
            MyList<BigInteger> table_inv = new MyList<BigInteger>();
            int pow = 1 << (w - 1);

            Stopwatch stw = new Stopwatch();
            found = found % mod;
            int count = pow >> 1;

            int temp;
            BigInteger a = found;
            BigInteger temp_val;

            if (mont)
            {
                stw.Start();
                MyList<BigInteger> parameters = toMontgomeryDomain(ref a, ref res, mod);
                for (BigInteger i = 0; i < count; i++)
                {
                    table.Add(res);
                    table_inv.Add(res);
                }
                stw.Stop();

                for (int i = x.Count - 1; i > -1; i--)
                {
                    if (x[i] > 0)
                    {
                        temp = x[i] >> 1;
                        table[temp] = MontgomeryMultDomain(table[temp], a, mod, parameters);
                    }
                    else if (x[i] < 0)
                    {
                        temp = (-x[i]) >> 1;
                        table_inv[temp] = MontgomeryMultDomain(table_inv[temp], a, mod, parameters);
                    }

                    a = MontgomeryMultDomain(a, a, mod, parameters);
                }

                stw.Start();
                for (int i = count - 1; i > 0; i--)
                {
                    table[i - 1] = MontgomeryMultDomain(table[i - 1], table[i], mod, parameters);
                    temp_val = MontgomeryMultDomain(table[i], table[i], mod, parameters);
                    table[0] = MontgomeryMultDomain(table[0], temp_val, mod, parameters);

                    table_inv[i - 1] = MontgomeryMultDomain(table_inv[i - 1], table_inv[i], mod, parameters);
                    temp_val = MontgomeryMultDomain(table_inv[i], table_inv[i], mod, parameters);
                    table_inv[0] = MontgomeryMultDomain(table_inv[0], temp_val, mod, parameters);
                }
                stw.Stop();
                table_time = stw.Elapsed.TotalMilliseconds;

                res = MontgomeryMultDomain(table[0], MontgomeryInverse(mod, table_inv[0], parameters), mod, parameters);
                res = outMontgomeryDomain(res, mod, parameters);
                return res;
            }
            else
            {
                stw.Start();
                for (BigInteger i = 0; i < count; i++)
                {
                    table.Add(1);
                    table_inv.Add(1);
                }
                stw.Stop();

                for (int i = x.Count - 1; i > -1; i--)
                {
                    if (x[i] > 0)
                    {
                        temp = x[i] >> 1;
                        table[temp] = table[temp] * a % mod;
                    }
                    else if (x[i] < 0)
                    {
                        temp = (-x[i]) >> 1;
                        table_inv[temp] = table_inv[temp] * a % mod;
                    }

                    a = a * a % mod;
                }

                stw.Start();
                for (int i = count - 1; i > 0; i--)
                {
                    table[i - 1] = table[i - 1] * table[i] % mod;
                    temp_val = table[i] * table[i] % mod;
                    table[0] = table[0] * temp_val % mod;

                    table_inv[i - 1] = table_inv[i - 1] * table_inv[i] % mod;
                    temp_val = table_inv[i] * table_inv[i] % mod;
                    table_inv[0] = table_inv[0] * temp_val % mod;
                }
                stw.Stop();
                table_time = stw.Elapsed.TotalMilliseconds;

                return table[0] * Euclid_2_1(mod, table_inv[0]) % mod;
            }

            /*
            BigInteger res = 1;
            MyList<int> x = ToWNAF(power, w);
            MyList<BigInteger> table = new MyList<BigInteger>();
            BigInteger pow = 1 << ( w - 1);

            Stopwatch stw = new Stopwatch();
            found = found % mod;
            stw.Start();
            for (BigInteger i = 1; i < pow; i += 2)
                table.Add(BinaryRL(found, i, mod));
            stw.Stop();

            table_time = stw.Elapsed.TotalMilliseconds;
            for (int i = x.Count - 1; i > -1; i--)
            {
                if (x[i] > 0)
                    res = mul(res,  table[(int)(x[i] / 2)], mod);
                else if (x[i] < 0)
                    res = mul(res,  Euclid_2_1(mod, table[(-x[i] / 2)]), mod);

                for (int j = 0; j < table.Count; j++)
                    table[j] = mul(table[j], table[j], mod);
            }
            return res;
            */

        }

        public static BigInteger NAFWindowLR(BigInteger found, BigInteger power, BigInteger mod, int w, out double table_time)
        {
            bool mont = AdditionalParameters.montFlag;
            BigInteger res = 1;
            var x = ToWNAF(power, w);
            var table = new MyList<BigInteger>();
            MyList<BigInteger> table_inv = new MyList<BigInteger>();
            int pow = 1 << (w - 1);

            found = found % mod;
            Stopwatch stw = new Stopwatch();

            int temp;

            if (mont)
            {
                MyList<BigInteger> parameters = toMontgomeryDomain(ref found, ref res, mod);

                stw.Start();

                table.Add(found);
                table_inv.Add(MontgomeryInverse(mod, found, parameters));

                BigInteger sqr_found = MontgomeryMultDomain(found, found, mod, parameters);
                int count = pow >> 1;
                for (BigInteger i = 1; i < count; i++)
                {
                    table.Add(MontgomeryMultDomain(table[i - 1], sqr_found, mod, parameters));
                    table_inv.Add(MontgomeryInverse(mod, table[i], parameters));
                }
                stw.Stop();
                table_time = stw.Elapsed.TotalMilliseconds;

                for (int i = 0; i < x.Count; i++)
                {
                    res = MontgomeryMultDomain(res, res, mod, parameters);

                    if (x[i] > 0)
                    {
                        temp = x[i] >> 1;
                        res = MontgomeryMultDomain(res, table[temp], mod, parameters);
                    }
                    else if (x[i] < 0)
                    {
                        temp = (-x[i]) >> 1;
                        res = MontgomeryMultDomain(res, table_inv[temp], mod, parameters);
                    }
                }

                res = outMontgomeryDomain(res, mod, parameters);
            }
            else
            {
                stw.Start();

                table.Add(found);
                table_inv.Add(Euclid_2_1(mod, found));

                BigInteger sqr_found = found * found % mod;
                int count = pow >> 1;
                for (BigInteger i = 1; i < count; i++)
                {
                    table.Add(table[i - 1] * sqr_found % mod);
                    table_inv.Add(Euclid_2_1(mod, table[i]));
                }
                stw.Stop();
                table_time = stw.Elapsed.TotalMilliseconds;

                for (int i = 0; i < x.Count; i++)
                {
                    res = res * res % mod;

                    if (x[i] > 0)
                    {
                        temp = x[i] >> 1;
                        res = res * table[temp] % mod;
                    }
                    else if (x[i] < 0)
                    {
                        temp = (-x[i]) >> 1;
                        res = res * table_inv[temp] % mod;
                    }
                }
            }
            return res;


            /*
            BigInteger res = 1;
            var x = ToWNAF(power, w);
            var table = new MyList<BigInteger>();
            BigInteger pow = (BigInteger)Pow(2, w - 1);

            Stopwatch stw = new Stopwatch();
            found = found % mod;
            stw.Start();
            for (BigInteger i = 1; i < pow; i += 2)
                table.Add(BinaryLR(found, i, mod));
            stw.Stop();

            table_time = stw.Elapsed.TotalMilliseconds;
            for (BigInteger i = 0; i < x.Count; i++)
            {
                res = mul(res, res, mod);
                if (x[i] > 0)
                    res = mul(res, table[(x[i] / 2)], mod);
                else if (x[i] < 0)
                    res = mul(res, Euclid_2_1(mod, table[(-x[i] / 2)]), mod);
            }
            return res;
            */

        }

        public static BigInteger wNAFSlidingRL(BigInteger found, BigInteger power, BigInteger mod, int w, out double table_time)
        {
            BigInteger res = 1;
            var x = ToWNAF(power, w);
            found = found % mod;

            var table = new MyList<BigInteger>();
            BigInteger pow = 2 * ((BigInteger)Pow(2, w) - (BigInteger)Pow((-1), w)) / 3 - 1;
            Stopwatch stw = new Stopwatch();
            stw.Start();

            for (BigInteger i = 1; i <= pow; i += 2)
                table.Add(BinaryRL(found, i, mod));

            stw.Stop();

            table_time = stw.Elapsed.TotalMilliseconds;

            for (int i = x.Count - 1; i > -1; )
            {
                var max = FindLargest2(x, i, w);

                if (max[0] > 0)
                    res = mul(res, table[(BigInteger)(Abs((decimal)x[i]) / 2)], mod);
                else if (max[0] < 0)
                    res = mul(res, Euclid_2_1(mod, table[(BigInteger)(Abs((decimal)x[i]) / 2)]), mod);

                for (int d = 0; d < max[1]; d++)
                    for (int j = 0; j < table.Count; j++)
                        table[j] = mul(table[j], table[j], mod);

                i = i - max[1];
            }
            return res;
        }

        public static BigInteger wNAFSlidingLR(BigInteger found, BigInteger power, BigInteger mod, int w, out double table_time)
        {

            BigInteger res = 1;
            var x = ToWNAF(power, w);

            Stopwatch stw = new Stopwatch();
            found = found % mod;
            stw.Start();

            int sign;
            if (w % 2 == 1)
                sign = -1;
            else
                sign = 1;

            int last_table_element = (((1 << w) - sign) << 1) / 3 - 1;

            MyList<BigInteger> table = new MyList<BigInteger>();
            MyList<BigInteger> table_inv = new MyList<BigInteger>();

            table.Add(found);
            table_inv.Add(Euclid_2_1(mod, found));

            BigInteger sqr_found = found * found % mod;

            for (int i = 3; i <= last_table_element; i += 2)
            {
                table.Add(table[(i >> 1) - 1] * sqr_found % mod);
                table_inv.Add(Euclid_2_1(mod, table[i >> 1]));
            }

            stw.Stop();
            table_time = stw.Elapsed.TotalMilliseconds;

            for (int i = 0; i < x.Count;)
            {
                List<int> max = new List<int>();
                if (x[i] == 0 || i == 0)
                {
                    max.Add(x[i]);
                    max.Add(1);
                }
                else
                    max = FindLargest1(x, i, w);

                for (int d = 0; d < max[1]; d++)
                    res = res * res % mod;

                if (max[0] > 0)
                    res = res * table[max[0] >> 1] % mod;
                else if (max[0] < 0)
                    res = res * table_inv[(-max[0]) >> 1] % mod;

                i = i + max[1];
            }
            return res;


            /*
            BigInteger res = 1;
            var x = ToWNAF(power,w);
            found = found % mod;

            var table = new MyList<BigInteger>();
            BigInteger pow = 2 * ((BigInteger)Pow(2, w) - (BigInteger)Pow((-1), w)) / 3 - 1;
            Stopwatch stw = new Stopwatch();
            stw.Start();
            for (BigInteger i = 1; i <= pow; i += 2)
                table.Add(BinaryLR(found, i, mod));
            stw.Stop();

            table_time = stw.Elapsed.TotalMilliseconds;
            for (int i = 0; i < x.Count; )
            {
                var max = new MyList<int>();
                if (x[i] == 0)
                {
                    max.Add(0);
                    max.Add(1);
                }
                else
                    max = FindLargest2(x, i, w);

                for (int d = 0; d < max[1]; d++)
                    res = mul(res, res, mod);

                if (max[0] > 0)
                    res = mul(res, table[(BigInteger)(Abs((decimal)max[0]) / 2)], mod);
                else if (max[0] < 0)
                    res = mul(res, Euclid_2_1(mod, table[(BigInteger)(Abs((decimal)max[0]) / 2)]), mod);

                i = i + max[1];
            }
            return res;
            */

        }

        #endregion
    }
    abstract class GenFunctions
    {
        public static List<int> ReadString(string s)
        {
            string st = "";
            List<string> sts = new List<string>();
            for (int i = 0; i < s.Length; i++)
            {
                if (s[i] == ' ')
                    continue;
                if (s[i] != ';')
                    st = st + s[i];
                else
                {
                    sts.Add(st);
                    st = "";
                }
            }
            if (st != "")
            {
                sts.Add(st);
                st = "";
            }

            List<int> x = new List<int>();
            List<int> pows = new List<int>();
            for (int i = 0; i < sts.Count; i++)
            {
                x.Clear();
                for (int j = 0; j < sts[i].Length; j++)
                {
                    if (sts[i][j] != '-')
                        st = st + sts[i][j];
                    if (sts[i][j] == '-')
                    {
                        x.Add(Convert.ToInt16(st));
                        st = "";
                    }
                }
                if (st != "")
                {
                    x.Add(Convert.ToInt16(st));
                    st = "";
                }

                if (x.Count == 1)
                    pows.Add(x[0]);
                else
                {
                    int step;
                    if (x.Count == 2)
                        step = 1;
                    else
                        step = x[2];
                    for (int j = x[0]; j <= x[1]; j += step)
                        pows.Add(j);
                }
            }
            pows.Sort();
            for (int i = 0; i < pows.Count - 1; i++)
            {
                if (pows[i] == pows[i + 1])
                {
                    pows.RemoveAt(i);
                    i--;
                }
            }
            return pows;
        }
        public static int rand(int l, int h)
        {
            Random r = new Random();
            int x = r.Next(l, h);
            return x;
        }
        public delegate BigInteger random_num(int n, string type);

        public static BigInteger random_max(int n, string type = "Bytes")
        {
            var rng = new RNGCryptoServiceProvider();
            byte[] bytes = new byte[n + 1];
            rng.GetBytes(bytes);
            if (type == "Bytes")
            {
                bytes[n - 1] |= 0x80;//128
                bytes[n] = 0;
                return new BigInteger(bytes);
            }
            else
            {
                string s = "01";
                for (int i = 0; i < n - 1; i++)
                {
                    s += bytes[i] % 2 == 0 ? '1' : '0';
                }

                return new BigInteger(Convert.ToInt32(s, 2));
            }
        }

        public static BigInteger random_max_bites(int n)//n - length in bit
        {
            string s = "";
            var rand = new Random();
            for (int i = 0; i < n + 1; i++)
            {
                s += rand.Next(2) == 1 ? '1' : '0';
            }

            BigInteger b = new BigInteger(Convert.ToInt32(s, 2));

            return b;
        }

        public static BigInteger random_two(int n, string type)//n - length in bytes
        {
            if (type == "Bytes")
            {
                var rng = new RNGCryptoServiceProvider();
                byte[] bytes = new byte[n + 1];
                bytes[n] = 1;
                for (int i = 0; i < bytes.Length - 1; i++)
                {
                    bytes[i] = 0;
                }

                return new BigInteger(bytes);
            }
            else
            {
                string s = "";
                s += '1';
                for (int i = 1; i < n + 1; i++)
                {
                    s += '0';
                }
                return new BigInteger(Convert.ToInt32(s, 2));
            }

        }
        public static BigInteger random_simple(int n, string type)//n - length in bytes
        {
            BigInteger b;
            again:
            b = random_odd(n, type);
            if (type == "Bytes")
            {
                if (b.IsProbablePrime())
                    return b;
            }
            else
            {
                if (b.IsProbablePrime())
                    //if (Primality_Tests.Ferma(b))
                    return b;
            }
            goto again;
        }
        public static BigInteger random_odd(int n, string type)//n - length in bytes
        {
            var rng = new RNGCryptoServiceProvider();
            byte[] bytes = new byte[n + 1];
            rng.GetBytes(bytes);
            if (type == "Bytes")
            {
                bytes[n - 1] |= 0x80;
                bytes[n] = 0;
                bytes[0] |= 1;
                if (bytes[0] % 2 == 0)
                {
                    bytes[0]++;
                }

                return new BigInteger(bytes);
            }
            else
            {
                char[] mas = new char[n + 1];
                mas[n - 1] = '1';
                mas[n] = '0';
                mas[0] = '1';
                for (int i = 1; i < n - 1; i++)
                {
                    mas[i] += bytes[i] % 2 == 0 ? '1' : '0';
                }
                Array.Reverse(mas);
                return new BigInteger(Convert.ToInt32(new string(mas), 2));
            }

        }
    }

    public static class BigIntegerExtensions
    {
        //Тест Миллера-Рабина на простоту
        public static bool IsProbablePrime(this BigInteger source, int certainty = 5)
        {
            if (source == 2 || source == 3)
                return true;
            if (source < 2 || source % 2 == 0)
                return false;

            BigInteger d = source - 1;
            int s = 0;

            while (d % 2 == 0)
            {
                d /= 2;
                s += 1;
            }

            // There is no built-in method for generating random BigInteger values.
            // Instead, random BigIntegers are constructed from randomly generated
            // byte arrays of the same length as the source.
            RandomNumberGenerator rng = RandomNumberGenerator.Create();
            byte[] bytes = new byte[source.ToByteArray().LongLength];
            BigInteger a;

            for (int i = 0; i < certainty; i++)
            {
                do
                {
                    rng.GetBytes(bytes);
                    a = new BigInteger(bytes);
                }
                while (a < 2 || a >= source - 2);

                BigInteger x = BigInteger.ModPow(a, d, source);
                if (x == 1 || x == source - 1)
                    continue;

                for (int r = 1; r < s; r++)
                {
                    x = BigInteger.ModPow(x, 2, source);
                    if (x == 1)
                        return false;
                    if (x == source - 1)
                        break;
                }

                if (x != source - 1)
                    return false;
            }

            return true;
        }
        public static BigInteger Pow(this BigInteger value, BigInteger exponent)
        {
            BigInteger _base = 1;
            for (BigInteger i = 0; i < exponent; i++)
            {
                _base *= value;
            }
            return _base;
        }
        public static BigInteger Euclid_2_1(this BigInteger mod, BigInteger found)
        {
            BigInteger u, v, A, B, C, D, y, t1, t2, t3, q, d, inv;

            u = mod;
            v = found;

            A = 1;
            B = 0;
            C = 0;
            D = 1;

            while (v != 0)
            {
                q = u / v;
                t1 = u - q * v;
                t2 = A - q * C;
                t3 = B - q * D;

                u = v;
                A = C;
                B = D;

                v = t1;
                C = t2;
                D = t3;
            }
            d = u; y = B;

            if (y >= 0) inv = y;
            else inv = y + mod;
            return inv;
        }
        public static MyList<int> ToNAF(this BigInteger k)
        {
            MyList<int> mas_k = new MyList<int>();
            int i = 0;
            while (k >= 1)
            {
                if (k % 2 != 0)
                {
                    mas_k.Add((int)(2 - (k % 4)));
                    k = k - mas_k[i];
                }
                else
                    mas_k.Add(0);


                k = k / 2;
                i++;
            }
            return mas_k;
        }
        public static BigInteger TwoPow(this BigInteger pow)
        {
            BigInteger result = 1;
            for (BigInteger i = 0; i < pow; i++)
            {
                result = result << 1;
            }
            return result;
        }
        private static string ConvToBinary(this BigInteger num)
        {
            string x = "";
            while (num != 0)
            {
                x += num % 2;
                num /= 2;
            }
            char[] charArray = x.ToCharArray();
            Array.Reverse(charArray);
            return new string(charArray);
        }
        //Тест Миллера-Рабина на простоту код студента
        public static bool Prime_Test_Miller_Rabin(this BigInteger y)
        {
            BigInteger b = 0, T, a;
            bool flag = true;
            int k = 0, i = 0; //a - osnova
            if ((y & 1) == 0) return false;  // nuzhno ne4etnoe 4islo
            if (y == 3) return true;
            do
            {
                int N = (int)Ceiling(Ceiling(BigInteger.Log(y - 1, 2)) / 8); //kol-vo byte v 4isle (y-1)
                int rnd = GenFunctions.rand(1, N);                //
                a = GenFunctions.random_max(rnd);          //generiruem osnovu <<a>> v diapazone ot 1 do (y-1)
            }
            while ((a >= y - 1) || (a <= 1));


            if (BigInteger.GreatestCommonDivisor(a, y) != 1) return false;
            else
            {
                while (flag == true)
                {
                    k++;
                    b = (y - 1) >> k;                    // y-1 = 2^k * b,
                    if ((b & 1) == 1) flag = false;      // b - ne4etnoe
                }
                T = BigInteger.ModPow(a, b, y);
                if ((T == 1) || (T == y - 1)) return true;

                else
                {
                    for (i = 1; i < k; i++)
                    {
                        T = BigInteger.ModPow(T, 2, y);
                        if (T == y - 1) return true;
                    }
                }
            }

            return false;
        }
    }

}
